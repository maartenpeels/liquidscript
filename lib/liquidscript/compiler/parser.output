Productions:
    0 $start: main $end
    1 main: expressions.maybe
    2 expressions.maybe: expressions
    3 expressions.maybe:                                                                       { nil }
    4 expressions: expressions expression                                                      { |a, b| a << b }
    5 expressions: expression                                                                  { |a| [a] }
    6 block: "{" expressions.maybe "}"                                                         { |_, a, _| [:block, a] }
    7 block_or_vexpression: block
    8 block_or_vexpression: vexpression
    9 expression: conditional
   10 expression: class
   11 expression: module
   12 expression: loop
   13 expression: action
   14 expression: exception
   15 expression: directive
   16 expression: vexpression
   17 expression: "\\n"                                                                        { nil }
   18 expression: vvexpression "=" vexpression                                                 { |a, _, b| [:set, a, b] }
   19 vexpression: NUMBER
   20 vexpression: ISTRING
   21 vexpression: SSTRING
   22 vexpression: KEYWORD
   23 vexpression: REGEX
   24 vexpression: interpolation
   25 vexpression: "+" vexpression                                                             { |_, a| [:pos, a] }
   26 vexpression: "-" vexpression                                                             { |_, a| [:neg, a] }
   27 vexpression: object
   28 vexpression: array
   29 vexpression: function
   30 vexpression: PREUNOP vexpression                                                         { |a, b| [:unop, a, b] }
   31 vexpression: UNOP vexpression                                                            { |a, b| [:unop, a, b] }
   32 vexpression: HEREDOC_REF
   33 vexpression: IHEREDOC_REF
   34 vexpression: "(" vexpression ")"                                                         { |_, a, _| a }
   35 vexpression: heredoc
   36 vexpression: vexpression "(" vexpression.parameters.maybe ")"                            { |a, _, b, _| [:call, a, b] }
   37 vexpression: vexpression ".." vexpression                                                { |a, _, b| [:range, a, b] }
   38 vexpression: vexpression "..." vexpression                                               { |a, _, b| [:erange, a, b] }
   39 vexpression: vexpression BINOP vexpression                                               { |a, b, c| [:binop, a, b, c] }
   40 vexpression: vexpression "-" vexpression                                                 { |a, b, c| [:binop, a, b, c] }
   41 vexpression: vexpression "+" vexpression                                                 { |a, b, c| [:plus, a, b, c] }
   42 vexpression: vexpression UNOP                                                            { |a, b| [:unop, a, b] }
   43 vexpression: vvexpression
   44 vvexpression: vexpression "." IDENTIFIER                                                 { |a, _, b| [:prop, a, b] }
   45 vvexpression: vexpression "[" vexpression "]"                                            { |a, _, b| [:access, a, b] }
   46 vvexpression: IDENTIFIER
   47 vexpression.parameters.maybe: vexpression.parameters
   48 vexpression.parameters.maybe:
   49 vexpression.parameters: vexpression.parameters "," vexpression                           { |a, _, b| a << b }
   50 vexpression.parameters: vexpression                                                      { |*a| a }
   51 object: "{" "}"                                                                          { [:object] }
   52 array: "[" "]"                                                                           { [:array] }
   53 function: "->" function.arguments.maybe block                                            { |_, a, b| [:func, a, b] }
   54 heredoc: HEREDOC
   55 heredoc: IHEREDOC
   56 function.arguments.maybe: "(" function.arguments.body.maybe ")"                          { |_, a, _| a }
   57 function.arguments.maybe:                                                                { nil }
   58 function.arguments.body.maybe: function.arguments.body
   59 function.arguments.body.maybe:                                                           { nil }
   60 function.arguments.body: function.arguments.body "," IDENTIFIER                          { |a, _, b| a << b }
   61 function.arguments.body: IDENTIFIER                                                      { |a| [a] }
   62 interpolation: interpolation.string
   63 interpolation: interpolation.heredoc
   64 interpolation.heredoc: IHEREDOC_BEGIN vexpression interpolation.heredoc.finish
   65 interpolation.heredoc.finish: interpolation.heredoc
   66 interpolation.heredoc.finish: IHEREDOC
   67 interpolation.string: ISTRING_BEGIN vexpression interpolation.string.finish
   68 interpolation.string.finish: interpolation.string
   69 interpolation.string.finish: ISTRING
   70 conditional: "if" "(" vexpression ")" block conditional.continue.maybe                   { |_, _, a, _, b, c| [:if, a, b, c] }
   71 conditional: "unless" "(" vexpression ")" block                                          { |_, _, a, _, b| [:unless, a, b] }
   72 conditional.continue.maybe: conditional.continue
   73 conditional.continue.maybe:                                                              { nil }
   74 conditional.continue: "elsif" "(" vexpression ")" block conditional.continue.maybe       { |_, _, a, _, b, c| [:elsif, a, b, c] }
   75 conditional.continue: "else" block                                                       { |_, a| [:else, a] }
   76 class: "class" IDENTIFIER "{" class.definition.parts.maybe "}"                           { |_, a, _, b, _| [:class, a, b] }
   77 module: "module" IDENTIFIER "{" module.definition.parts.maybe "}"                        { |_, a, _, b, _| [:module, a, b] }
   78 class.definition.parts.maybe: class.definition.parts
   79 class.definition.parts.maybe:                                                            { nil }
   80 class.definition.parts: class.definition.parts class.definition.part                     { |a, b| a << b }
   81 class.definition.parts: class.definition.part                                            { |a| [a] }
   82 class.definition.part: IDENTIFIER ":" vexpression                                        { |a, _, b| [:inst, a, b] }
   83 class.definition.part: IDENTIFIER "." IDENTIFIER ":" vexpression                         { |a, _, b, _, c| [:class, a, b, c] }
   84 class.definition.part: module
   85 class.definition.part: class
   86 module.definition.parts.maybe: module.definition.parts
   87 module.definition.parts.maybe:                                                           { nil }
   88 module.definition.parts: module.definition.parts module.definition.part                  { |a, b| a << b }
   89 module.definition.parts: module.definition.part                                          { |a| [a] }
   90 module.definition.part: IDENTIFIER ":" vexpression                                       { |a, _, b| [:inst, a, b] }
   91 loop: "while" "(" vexpression ")" block                                                  { |_, _, a, _, b| [:while, a, b] }
   92 loop: "for" "(" IDENTIFIER "in" vexpression ")" block                                    { |_, _, a, _, b, _, c| [:forin, a, b, c] }
   93 loop: "for" "(" vexpression ")" block                                                    { |_, _, a, _, b| [:for, a, b] }
   94 action: "return" vexpression                                                             { |_, a| [:return, a] }
   95 action: ACTION
   96 exception: "try" "{" expressions.maybe "}" exception.catch.maybe exception.finally.maybe { |_, _, a, _, b, c| [:try, a, b, c] }
   97 exception.catch.maybe: exception.catch
   98 exception.catch.maybe:                                                                   { nil }
   99 exception.finally.maybe: exception.finally
  100 exception.finally.maybe:                                                                 { nil }
  101 exception.catch: "catch" exception.catch.possible block                                  { |_, a, b| [:catch, a, b] }
  102 exception.catch.possible: "(" IDENTIFIER ")"                                             { |_, a, _| a }
  103 exception.catch.possible: "(" ")"                                                        { nil }
  104 exception.catch.possible:                                                                { nil }
  105 exception.finally: "finally" block                                                       { |_, a| [:finally, a ] }
  106 directive: ":" "[" expressions "]"                                                       { |_, _, a, _| [:directive, a] }

Symbols unused in grammar:
  DIRECTIVE
  block_or_vexpression

Precedence:
  --- highest
  nonassoc 7:
    {FIX}
  nonassoc 6:
    {LBRACK, LPAREN}
  right    5:
    {UNOP, PROP}
  left     4:
    {RANGE, ERANGE}
  left     3:
    {BINOP, PLUS, MINUS}
  right    2:
    {EQUAL}
  nonassoc 1:
    {_}
  nonassoc 0:
    {$end}
  --- lowest

  State 0:
    0/n0: $start →  • main $end
      {}
    1/n1: main →  • expressions.maybe
      {}
    2/n1: expressions.maybe →  • expressions
      {}
    3/n1: expressions.maybe →  •
      {$end}
    4/n1: expressions →  • expressions expression
      {}
    5/n1: expressions →  • expression
      {}
    6/n1: expression →  • conditional
      {}
    7/n1: expression →  • class
      {}
    8/n1: expression →  • module
      {}
    9/n1: expression →  • loop
      {}
    10/n1: expression →  • action
      {}
    11/n1: expression →  • exception
      {}
    12/n1: expression →  • directive
      {}
    13/n1: expression →  • vexpression
      {}
    14/n1: expression →  • "\\n"
      {}
    15/r2: expression →  • vvexpression "=" vexpression
      {}
    16/n1: conditional →  • "if" "(" vexpression ")" block conditional.continue.maybe
      {}
    17/n1: conditional →  • "unless" "(" vexpression ")" block
      {}
    18/n1: class →  • "class" IDENTIFIER "{" class.definition.parts.maybe "}"
      {}
    19/n1: module →  • "module" IDENTIFIER "{" module.definition.parts.maybe "}"
      {}
    20/n1: loop →  • "while" "(" vexpression ")" block
      {}
    21/n1: loop →  • "for" "(" IDENTIFIER "in" vexpression ")" block
      {}
    22/n1: loop →  • "for" "(" vexpression ")" block
      {}
    23/n1: action →  • "return" vexpression
      {}
    24/n1: action →  • ACTION
      {}
    25/n1: exception →  • "try" "{" expressions.maybe "}" exception.catch.maybe exception.finally.maybe
      {}
    26/n1: directive →  • ":" "[" expressions "]"
      {}
    27/n1: vexpression →  • NUMBER
      {}
    28/n1: vexpression →  • ISTRING
      {}
    29/n1: vexpression →  • SSTRING
      {}
    30/n1: vexpression →  • KEYWORD
      {}
    31/n1: vexpression →  • REGEX
      {}
    32/n1: vexpression →  • interpolation
      {}
    33/l3: vexpression →  • "+" vexpression
      {}
    34/l3: vexpression →  • "-" vexpression
      {}
    35/n1: vexpression →  • object
      {}
    36/n1: vexpression →  • array
      {}
    37/n1: vexpression →  • function
      {}
    38/n1: vexpression →  • PREUNOP vexpression
      {}
    39/r5: vexpression →  • UNOP vexpression
      {}
    40/n1: vexpression →  • HEREDOC_REF
      {}
    41/n1: vexpression →  • IHEREDOC_REF
      {}
    42/n1: vexpression →  • "(" vexpression ")"
      {}
    43/n1: vexpression →  • heredoc
      {}
    44/n1: vexpression →  • vexpression "(" vexpression.parameters.maybe ")"
      {}
    45/l4: vexpression →  • vexpression ".." vexpression
      {}
    46/l4: vexpression →  • vexpression "..." vexpression
      {}
    47/l3: vexpression →  • vexpression BINOP vexpression
      {}
    48/l3: vexpression →  • vexpression "-" vexpression
      {}
    49/l3: vexpression →  • vexpression "+" vexpression
      {}
    50/r5: vexpression →  • vexpression UNOP
      {}
    51/n1: vexpression →  • vvexpression
      {}
    52/n1: vvexpression →  • vexpression "." IDENTIFIER
      {}
    53/n1: vvexpression →  • vexpression "[" vexpression "]"
      {}
    54/n1: vvexpression →  • IDENTIFIER
      {}
    55/n1: interpolation →  • interpolation.string
      {}
    56/n1: interpolation →  • interpolation.heredoc
      {}
    57/n1: object →  • "{" "}"
      {}
    58/n1: array →  • "[" "]"
      {}
    59/n1: function →  • "->" function.arguments.maybe block
      {}
    60/n1: heredoc →  • HEREDOC
      {}
    61/n1: heredoc →  • IHEREDOC
      {}
    62/n1: interpolation.string →  • ISTRING_BEGIN vexpression interpolation.string.finish
      {}
    63/n1: interpolation.heredoc →  • IHEREDOC_BEGIN vexpression interpolation.heredoc.finish
      {}
    transitions:
      main: State 1
      expressions.maybe: State 2
      expressions: State 3
      expression: State 4
      conditional: State 5
      class: State 6
      module: State 7
      loop: State 8
      action: State 9
      exception: State 10
      directive: State 11
      vexpression: State 12
      "\\n": State 13
      vvexpression: State 14
      "if": State 15
      "unless": State 16
      "class": State 17
      "module": State 18
      "while": State 19
      "for": State 20
      "return": State 21
      ACTION: State 22
      "try": State 23
      ":": State 24
      NUMBER: State 25
      ISTRING: State 26
      SSTRING: State 27
      KEYWORD: State 28
      REGEX: State 29
      interpolation: State 30
      "+": State 31
      "-": State 32
      object: State 33
      array: State 34
      function: State 35
      PREUNOP: State 36
      UNOP: State 37
      HEREDOC_REF: State 38
      IHEREDOC_REF: State 39
      "(": State 40
      heredoc: State 41
      IDENTIFIER: State 42
      interpolation.string: State 43
      interpolation.heredoc: State 44
      "{": State 45
      "[": State 46
      "->": State 47
      HEREDOC: State 48
      IHEREDOC: State 49
      ISTRING_BEGIN: State 50
      IHEREDOC_BEGIN: State 51
    reductions:
      $end: Rule 3

  State 1:
    64/n0: $start → main • $end
      {}
    transitions:
      $end: State 52

  State 2:
    65/n1: main → expressions.maybe •
      {$end}
    reductions:
      $end: Rule 1

  State 3:
    66/n1: expressions.maybe → expressions •
      {$end, "}"}
    67/n1: expressions → expressions • expression
      {}
    68/n1: expression →  • conditional
      {}
    69/n1: expression →  • class
      {}
    70/n1: expression →  • module
      {}
    71/n1: expression →  • loop
      {}
    72/n1: expression →  • action
      {}
    73/n1: expression →  • exception
      {}
    74/n1: expression →  • directive
      {}
    75/n1: expression →  • vexpression
      {}
    76/n1: expression →  • "\\n"
      {}
    77/r2: expression →  • vvexpression "=" vexpression
      {}
    78/n1: conditional →  • "if" "(" vexpression ")" block conditional.continue.maybe
      {}
    79/n1: conditional →  • "unless" "(" vexpression ")" block
      {}
    80/n1: class →  • "class" IDENTIFIER "{" class.definition.parts.maybe "}"
      {}
    81/n1: module →  • "module" IDENTIFIER "{" module.definition.parts.maybe "}"
      {}
    82/n1: loop →  • "while" "(" vexpression ")" block
      {}
    83/n1: loop →  • "for" "(" IDENTIFIER "in" vexpression ")" block
      {}
    84/n1: loop →  • "for" "(" vexpression ")" block
      {}
    85/n1: action →  • "return" vexpression
      {}
    86/n1: action →  • ACTION
      {}
    87/n1: exception →  • "try" "{" expressions.maybe "}" exception.catch.maybe exception.finally.maybe
      {}
    88/n1: directive →  • ":" "[" expressions "]"
      {}
    89/n1: vexpression →  • NUMBER
      {}
    90/n1: vexpression →  • ISTRING
      {}
    91/n1: vexpression →  • SSTRING
      {}
    92/n1: vexpression →  • KEYWORD
      {}
    93/n1: vexpression →  • REGEX
      {}
    94/n1: vexpression →  • interpolation
      {}
    95/l3: vexpression →  • "+" vexpression
      {}
    96/l3: vexpression →  • "-" vexpression
      {}
    97/n1: vexpression →  • object
      {}
    98/n1: vexpression →  • array
      {}
    99/n1: vexpression →  • function
      {}
    100/n1: vexpression →  • PREUNOP vexpression
      {}
    101/r5: vexpression →  • UNOP vexpression
      {}
    102/n1: vexpression →  • HEREDOC_REF
      {}
    103/n1: vexpression →  • IHEREDOC_REF
      {}
    104/n1: vexpression →  • "(" vexpression ")"
      {}
    105/n1: vexpression →  • heredoc
      {}
    106/n1: vexpression →  • vexpression "(" vexpression.parameters.maybe ")"
      {}
    107/l4: vexpression →  • vexpression ".." vexpression
      {}
    108/l4: vexpression →  • vexpression "..." vexpression
      {}
    109/l3: vexpression →  • vexpression BINOP vexpression
      {}
    110/l3: vexpression →  • vexpression "-" vexpression
      {}
    111/l3: vexpression →  • vexpression "+" vexpression
      {}
    112/r5: vexpression →  • vexpression UNOP
      {}
    113/n1: vexpression →  • vvexpression
      {}
    114/n1: vvexpression →  • vexpression "." IDENTIFIER
      {}
    115/n1: vvexpression →  • vexpression "[" vexpression "]"
      {}
    116/n1: vvexpression →  • IDENTIFIER
      {}
    117/n1: interpolation →  • interpolation.string
      {}
    118/n1: interpolation →  • interpolation.heredoc
      {}
    119/n1: object →  • "{" "}"
      {}
    120/n1: array →  • "[" "]"
      {}
    121/n1: function →  • "->" function.arguments.maybe block
      {}
    122/n1: heredoc →  • HEREDOC
      {}
    123/n1: heredoc →  • IHEREDOC
      {}
    124/n1: interpolation.string →  • ISTRING_BEGIN vexpression interpolation.string.finish
      {}
    125/n1: interpolation.heredoc →  • IHEREDOC_BEGIN vexpression interpolation.heredoc.finish
      {}
    transitions:
      expression: State 53
      conditional: State 5
      class: State 6
      module: State 7
      loop: State 8
      action: State 9
      exception: State 10
      directive: State 11
      vexpression: State 12
      "\\n": State 13
      vvexpression: State 14
      "if": State 15
      "unless": State 16
      "class": State 17
      "module": State 18
      "while": State 19
      "for": State 20
      "return": State 21
      ACTION: State 22
      "try": State 23
      ":": State 24
      NUMBER: State 25
      ISTRING: State 26
      SSTRING: State 27
      KEYWORD: State 28
      REGEX: State 29
      interpolation: State 30
      "+": State 31
      "-": State 32
      object: State 33
      array: State 34
      function: State 35
      PREUNOP: State 36
      UNOP: State 37
      HEREDOC_REF: State 38
      IHEREDOC_REF: State 39
      "(": State 40
      heredoc: State 41
      IDENTIFIER: State 42
      interpolation.string: State 43
      interpolation.heredoc: State 44
      "{": State 45
      "[": State 46
      "->": State 47
      HEREDOC: State 48
      IHEREDOC: State 49
      ISTRING_BEGIN: State 50
      IHEREDOC_BEGIN: State 51
    reductions:
      $end: Rule 2
      "}": Rule 2

  State 4:
    126/n1: expressions → expression •
      {$end, "if", "unless", "class", "module", "while", "for", "return", ACTION, "try", ":", NUMBER, ISTRING, SSTRING, KEYWORD, REGEX, ISTRING_BEGIN, IHEREDOC_BEGIN, "+", "-", "{", "[", "->", PREUNOP, UNOP, HEREDOC_REF, IHEREDOC_REF, "(", HEREDOC, IHEREDOC, "..", "...", BINOP, ".", IDENTIFIER, "\\n", "}", "]"}
    reductions:
      $default: Rule 5

  State 5:
    127/n1: expression → conditional •
      {$end, "if", "unless", "class", "module", "while", "for", "return", ACTION, "try", ":", NUMBER, ISTRING, SSTRING, KEYWORD, REGEX, ISTRING_BEGIN, IHEREDOC_BEGIN, "+", "-", "{", "[", "->", PREUNOP, UNOP, HEREDOC_REF, IHEREDOC_REF, "(", HEREDOC, IHEREDOC, "..", "...", BINOP, ".", IDENTIFIER, "\\n", "}", "]"}
    reductions:
      $default: Rule 9

  State 6:
    128/n1: expression → class •
      {$end, "if", "unless", "class", "module", "while", "for", "return", ACTION, "try", ":", NUMBER, ISTRING, SSTRING, KEYWORD, REGEX, ISTRING_BEGIN, IHEREDOC_BEGIN, "+", "-", "{", "[", "->", PREUNOP, UNOP, HEREDOC_REF, IHEREDOC_REF, "(", HEREDOC, IHEREDOC, "..", "...", BINOP, ".", IDENTIFIER, "\\n", "}", "]"}
    reductions:
      $default: Rule 10

  State 7:
    129/n1: expression → module •
      {$end, "if", "unless", "class", "module", "while", "for", "return", ACTION, "try", ":", NUMBER, ISTRING, SSTRING, KEYWORD, REGEX, ISTRING_BEGIN, IHEREDOC_BEGIN, "+", "-", "{", "[", "->", PREUNOP, UNOP, HEREDOC_REF, IHEREDOC_REF, "(", HEREDOC, IHEREDOC, "..", "...", BINOP, ".", IDENTIFIER, "\\n", "}", "]"}
    reductions:
      $default: Rule 11

  State 8:
    130/n1: expression → loop •
      {$end, "if", "unless", "class", "module", "while", "for", "return", ACTION, "try", ":", NUMBER, ISTRING, SSTRING, KEYWORD, REGEX, ISTRING_BEGIN, IHEREDOC_BEGIN, "+", "-", "{", "[", "->", PREUNOP, UNOP, HEREDOC_REF, IHEREDOC_REF, "(", HEREDOC, IHEREDOC, "..", "...", BINOP, ".", IDENTIFIER, "\\n", "}", "]"}
    reductions:
      $default: Rule 12

  State 9:
    131/n1: expression → action •
      {$end, "if", "unless", "class", "module", "while", "for", "return", ACTION, "try", ":", NUMBER, ISTRING, SSTRING, KEYWORD, REGEX, ISTRING_BEGIN, IHEREDOC_BEGIN, "+", "-", "{", "[", "->", PREUNOP, UNOP, HEREDOC_REF, IHEREDOC_REF, "(", HEREDOC, IHEREDOC, "..", "...", BINOP, ".", IDENTIFIER, "\\n", "}", "]"}
    reductions:
      $default: Rule 13

  State 10:
    132/n1: expression → exception •
      {$end, "if", "unless", "class", "module", "while", "for", "return", ACTION, "try", ":", NUMBER, ISTRING, SSTRING, KEYWORD, REGEX, ISTRING_BEGIN, IHEREDOC_BEGIN, "+", "-", "{", "[", "->", PREUNOP, UNOP, HEREDOC_REF, IHEREDOC_REF, "(", HEREDOC, IHEREDOC, "..", "...", BINOP, ".", IDENTIFIER, "\\n", "}", "]"}
    reductions:
      $default: Rule 14

  State 11:
    133/n1: expression → directive •
      {$end, "if", "unless", "class", "module", "while", "for", "return", ACTION, "try", ":", NUMBER, ISTRING, SSTRING, KEYWORD, REGEX, ISTRING_BEGIN, IHEREDOC_BEGIN, "+", "-", "{", "[", "->", PREUNOP, UNOP, HEREDOC_REF, IHEREDOC_REF, "(", HEREDOC, IHEREDOC, "..", "...", BINOP, ".", IDENTIFIER, "\\n", "}", "]"}
    reductions:
      $default: Rule 15

  State 12:
    134/n1: expression → vexpression •
      {$end, "if", "unless", "class", "module", "while", "for", "return", ACTION, "try", ":", NUMBER, ISTRING, SSTRING, KEYWORD, REGEX, ISTRING_BEGIN, IHEREDOC_BEGIN, "+", "-", "{", "[", "->", PREUNOP, UNOP, HEREDOC_REF, IHEREDOC_REF, "(", HEREDOC, IHEREDOC, "..", "...", BINOP, ".", IDENTIFIER, "\\n", "}", "]"}
    135/n1: vexpression → vexpression • "(" vexpression.parameters.maybe ")"
      {}
    136/l4: vexpression → vexpression • ".." vexpression
      {}
    137/l4: vexpression → vexpression • "..." vexpression
      {}
    138/l3: vexpression → vexpression • BINOP vexpression
      {}
    139/l3: vexpression → vexpression • "-" vexpression
      {}
    140/l3: vexpression → vexpression • "+" vexpression
      {}
    141/r5: vexpression → vexpression • UNOP
      {}
    142/n1: vvexpression → vexpression • "." IDENTIFIER
      {}
    143/n1: vvexpression → vexpression • "[" vexpression "]"
      {}
    transitions:
      "(": State 54
      "..": State 55
      "...": State 56
      BINOP: State 57
      "-": State 58
      "+": State 59
      UNOP: State 60
      ".": State 61
      "[": State 62
    reductions:
      $end: Rule 16
      "if": Rule 16
      "unless": Rule 16
      "class": Rule 16
      "module": Rule 16
      "while": Rule 16
      "for": Rule 16
      "return": Rule 16
      ACTION: Rule 16
      "try": Rule 16
      ":": Rule 16
      NUMBER: Rule 16
      ISTRING: Rule 16
      SSTRING: Rule 16
      KEYWORD: Rule 16
      REGEX: Rule 16
      ISTRING_BEGIN: Rule 16
      IHEREDOC_BEGIN: Rule 16
      "{": Rule 16
      "->": Rule 16
      PREUNOP: Rule 16
      HEREDOC_REF: Rule 16
      IHEREDOC_REF: Rule 16
      HEREDOC: Rule 16
      IHEREDOC: Rule 16
      IDENTIFIER: Rule 16
      "\\n": Rule 16
      "}": Rule 16
      "]": Rule 16
    conflicts:
      LPAREN: reduce 16/state 54 (n6 vs n1, resolved)
      RANGE: reduce 16/state 55 (l4 vs n1, resolved)
      ERANGE: reduce 16/state 56 (l4 vs n1, resolved)
      BINOP: reduce 16/state 57 (l3 vs n1, resolved)
      MINUS: reduce 16/state 58 (l3 vs n1, resolved)
      PLUS: reduce 16/state 59 (l3 vs n1, resolved)
      UNOP: reduce 16/state 60 (r5 vs n1, resolved)
      PROP: reduce 16/state 61 (r5 vs n1, resolved)
      LBRACK: reduce 16/state 62 (n6 vs n1, resolved)

  State 13:
    144/n1: expression → "\\n" •
      {$end, "if", "unless", "class", "module", "while", "for", "return", ACTION, "try", ":", NUMBER, ISTRING, SSTRING, KEYWORD, REGEX, ISTRING_BEGIN, IHEREDOC_BEGIN, "+", "-", "{", "[", "->", PREUNOP, UNOP, HEREDOC_REF, IHEREDOC_REF, "(", HEREDOC, IHEREDOC, "..", "...", BINOP, ".", IDENTIFIER, "\\n", "}", "]"}
    reductions:
      $default: Rule 17

  State 14:
    145/r2: expression → vvexpression • "=" vexpression
      {}
    146/n1: vexpression → vvexpression •
      {$end, "if", "unless", "class", "module", "while", "for", "return", ACTION, "try", ":", NUMBER, ISTRING, SSTRING, KEYWORD, REGEX, ISTRING_BEGIN, IHEREDOC_BEGIN, "+", "-", "{", "[", "->", PREUNOP, UNOP, HEREDOC_REF, IHEREDOC_REF, "(", HEREDOC, IHEREDOC, "..", "...", BINOP, ".", IDENTIFIER, "\\n", "}", "]", ")", ","}
    transitions:
      "=": State 63
    reductions:
      $end: Rule 43
      "if": Rule 43
      "unless": Rule 43
      "class": Rule 43
      "module": Rule 43
      "while": Rule 43
      "for": Rule 43
      "return": Rule 43
      ACTION: Rule 43
      "try": Rule 43
      ":": Rule 43
      NUMBER: Rule 43
      ISTRING: Rule 43
      SSTRING: Rule 43
      KEYWORD: Rule 43
      REGEX: Rule 43
      ISTRING_BEGIN: Rule 43
      IHEREDOC_BEGIN: Rule 43
      "+": Rule 43
      "-": Rule 43
      "{": Rule 43
      "[": Rule 43
      "->": Rule 43
      PREUNOP: Rule 43
      UNOP: Rule 43
      HEREDOC_REF: Rule 43
      IHEREDOC_REF: Rule 43
      "(": Rule 43
      HEREDOC: Rule 43
      IHEREDOC: Rule 43
      "..": Rule 43
      "...": Rule 43
      BINOP: Rule 43
      ".": Rule 43
      IDENTIFIER: Rule 43
      "\\n": Rule 43
      "}": Rule 43
      "]": Rule 43
      ")": Rule 43
      ",": Rule 43

  State 15:
    147/n1: conditional → "if" • "(" vexpression ")" block conditional.continue.maybe
      {}
    transitions:
      "(": State 64

  State 16:
    148/n1: conditional → "unless" • "(" vexpression ")" block
      {}
    transitions:
      "(": State 65

  State 17:
    149/n1: class → "class" • IDENTIFIER "{" class.definition.parts.maybe "}"
      {}
    transitions:
      IDENTIFIER: State 66

  State 18:
    150/n1: module → "module" • IDENTIFIER "{" module.definition.parts.maybe "}"
      {}
    transitions:
      IDENTIFIER: State 67

  State 19:
    151/n1: loop → "while" • "(" vexpression ")" block
      {}
    transitions:
      "(": State 68

  State 20:
    152/n1: loop → "for" • "(" IDENTIFIER "in" vexpression ")" block
      {}
    153/n1: loop → "for" • "(" vexpression ")" block
      {}
    transitions:
      "(": State 69

  State 21:
    154/n1: action → "return" • vexpression
      {}
    155/n1: vexpression →  • NUMBER
      {}
    156/n1: vexpression →  • ISTRING
      {}
    157/n1: vexpression →  • SSTRING
      {}
    158/n1: vexpression →  • KEYWORD
      {}
    159/n1: vexpression →  • REGEX
      {}
    160/n1: vexpression →  • interpolation
      {}
    161/l3: vexpression →  • "+" vexpression
      {}
    162/l3: vexpression →  • "-" vexpression
      {}
    163/n1: vexpression →  • object
      {}
    164/n1: vexpression →  • array
      {}
    165/n1: vexpression →  • function
      {}
    166/n1: vexpression →  • PREUNOP vexpression
      {}
    167/r5: vexpression →  • UNOP vexpression
      {}
    168/n1: vexpression →  • HEREDOC_REF
      {}
    169/n1: vexpression →  • IHEREDOC_REF
      {}
    170/n1: vexpression →  • "(" vexpression ")"
      {}
    171/n1: vexpression →  • heredoc
      {}
    172/n1: vexpression →  • vexpression "(" vexpression.parameters.maybe ")"
      {}
    173/l4: vexpression →  • vexpression ".." vexpression
      {}
    174/l4: vexpression →  • vexpression "..." vexpression
      {}
    175/l3: vexpression →  • vexpression BINOP vexpression
      {}
    176/l3: vexpression →  • vexpression "-" vexpression
      {}
    177/l3: vexpression →  • vexpression "+" vexpression
      {}
    178/r5: vexpression →  • vexpression UNOP
      {}
    179/n1: vexpression →  • vvexpression
      {}
    180/n1: interpolation →  • interpolation.string
      {}
    181/n1: interpolation →  • interpolation.heredoc
      {}
    182/n1: object →  • "{" "}"
      {}
    183/n1: array →  • "[" "]"
      {}
    184/n1: function →  • "->" function.arguments.maybe block
      {}
    185/n1: heredoc →  • HEREDOC
      {}
    186/n1: heredoc →  • IHEREDOC
      {}
    187/n1: vvexpression →  • vexpression "." IDENTIFIER
      {}
    188/n1: vvexpression →  • vexpression "[" vexpression "]"
      {}
    189/n1: vvexpression →  • IDENTIFIER
      {}
    190/n1: interpolation.string →  • ISTRING_BEGIN vexpression interpolation.string.finish
      {}
    191/n1: interpolation.heredoc →  • IHEREDOC_BEGIN vexpression interpolation.heredoc.finish
      {}
    transitions:
      vexpression: State 70
      NUMBER: State 25
      ISTRING: State 26
      SSTRING: State 27
      KEYWORD: State 28
      REGEX: State 29
      interpolation: State 30
      "+": State 31
      "-": State 32
      object: State 33
      array: State 34
      function: State 35
      PREUNOP: State 36
      UNOP: State 37
      HEREDOC_REF: State 38
      IHEREDOC_REF: State 39
      "(": State 40
      heredoc: State 41
      vvexpression: State 14
      interpolation.string: State 43
      interpolation.heredoc: State 44
      "{": State 45
      "[": State 46
      "->": State 47
      HEREDOC: State 48
      IHEREDOC: State 49
      IDENTIFIER: State 42
      ISTRING_BEGIN: State 50
      IHEREDOC_BEGIN: State 51

  State 22:
    192/n1: action → ACTION •
      {$end, "if", "unless", "class", "module", "while", "for", "return", ACTION, "try", ":", NUMBER, ISTRING, SSTRING, KEYWORD, REGEX, ISTRING_BEGIN, IHEREDOC_BEGIN, "+", "-", "{", "[", "->", PREUNOP, UNOP, HEREDOC_REF, IHEREDOC_REF, "(", HEREDOC, IHEREDOC, "..", "...", BINOP, ".", IDENTIFIER, "\\n", "}", "]"}
    reductions:
      $default: Rule 95

  State 23:
    193/n1: exception → "try" • "{" expressions.maybe "}" exception.catch.maybe exception.finally.maybe
      {}
    transitions:
      "{": State 71

  State 24:
    194/n1: directive → ":" • "[" expressions "]"
      {}
    transitions:
      "[": State 72

  State 25:
    195/n1: vexpression → NUMBER •
      {$end, "if", "unless", "class", "module", "while", "for", "return", ACTION, "try", ":", NUMBER, ISTRING, SSTRING, KEYWORD, REGEX, ISTRING_BEGIN, IHEREDOC_BEGIN, "+", "-", "{", "[", "->", PREUNOP, UNOP, HEREDOC_REF, IHEREDOC_REF, "(", HEREDOC, IHEREDOC, "..", "...", BINOP, ".", IDENTIFIER, "\\n", "}", "]", ")", ","}
    reductions:
      $default: Rule 19

  State 26:
    196/n1: vexpression → ISTRING •
      {$end, "if", "unless", "class", "module", "while", "for", "return", ACTION, "try", ":", NUMBER, ISTRING, SSTRING, KEYWORD, REGEX, ISTRING_BEGIN, IHEREDOC_BEGIN, "+", "-", "{", "[", "->", PREUNOP, UNOP, HEREDOC_REF, IHEREDOC_REF, "(", HEREDOC, IHEREDOC, "..", "...", BINOP, ".", IDENTIFIER, "\\n", "}", "]", ")", ","}
    reductions:
      $default: Rule 20

  State 27:
    197/n1: vexpression → SSTRING •
      {$end, "if", "unless", "class", "module", "while", "for", "return", ACTION, "try", ":", NUMBER, ISTRING, SSTRING, KEYWORD, REGEX, ISTRING_BEGIN, IHEREDOC_BEGIN, "+", "-", "{", "[", "->", PREUNOP, UNOP, HEREDOC_REF, IHEREDOC_REF, "(", HEREDOC, IHEREDOC, "..", "...", BINOP, ".", IDENTIFIER, "\\n", "}", "]", ")", ","}
    reductions:
      $default: Rule 21

  State 28:
    198/n1: vexpression → KEYWORD •
      {$end, "if", "unless", "class", "module", "while", "for", "return", ACTION, "try", ":", NUMBER, ISTRING, SSTRING, KEYWORD, REGEX, ISTRING_BEGIN, IHEREDOC_BEGIN, "+", "-", "{", "[", "->", PREUNOP, UNOP, HEREDOC_REF, IHEREDOC_REF, "(", HEREDOC, IHEREDOC, "..", "...", BINOP, ".", IDENTIFIER, "\\n", "}", "]", ")", ","}
    reductions:
      $default: Rule 22

  State 29:
    199/n1: vexpression → REGEX •
      {$end, "if", "unless", "class", "module", "while", "for", "return", ACTION, "try", ":", NUMBER, ISTRING, SSTRING, KEYWORD, REGEX, ISTRING_BEGIN, IHEREDOC_BEGIN, "+", "-", "{", "[", "->", PREUNOP, UNOP, HEREDOC_REF, IHEREDOC_REF, "(", HEREDOC, IHEREDOC, "..", "...", BINOP, ".", IDENTIFIER, "\\n", "}", "]", ")", ","}
    reductions:
      $default: Rule 23

  State 30:
    200/n1: vexpression → interpolation •
      {$end, "if", "unless", "class", "module", "while", "for", "return", ACTION, "try", ":", NUMBER, ISTRING, SSTRING, KEYWORD, REGEX, ISTRING_BEGIN, IHEREDOC_BEGIN, "+", "-", "{", "[", "->", PREUNOP, UNOP, HEREDOC_REF, IHEREDOC_REF, "(", HEREDOC, IHEREDOC, "..", "...", BINOP, ".", IDENTIFIER, "\\n", "}", "]", ")", ","}
    reductions:
      $default: Rule 24

  State 31:
    201/l3: vexpression → "+" • vexpression
      {}
    202/n1: vexpression →  • NUMBER
      {}
    203/n1: vexpression →  • ISTRING
      {}
    204/n1: vexpression →  • SSTRING
      {}
    205/n1: vexpression →  • KEYWORD
      {}
    206/n1: vexpression →  • REGEX
      {}
    207/n1: vexpression →  • interpolation
      {}
    208/l3: vexpression →  • "+" vexpression
      {}
    209/l3: vexpression →  • "-" vexpression
      {}
    210/n1: vexpression →  • object
      {}
    211/n1: vexpression →  • array
      {}
    212/n1: vexpression →  • function
      {}
    213/n1: vexpression →  • PREUNOP vexpression
      {}
    214/r5: vexpression →  • UNOP vexpression
      {}
    215/n1: vexpression →  • HEREDOC_REF
      {}
    216/n1: vexpression →  • IHEREDOC_REF
      {}
    217/n1: vexpression →  • "(" vexpression ")"
      {}
    218/n1: vexpression →  • heredoc
      {}
    219/n1: vexpression →  • vexpression "(" vexpression.parameters.maybe ")"
      {}
    220/l4: vexpression →  • vexpression ".." vexpression
      {}
    221/l4: vexpression →  • vexpression "..." vexpression
      {}
    222/l3: vexpression →  • vexpression BINOP vexpression
      {}
    223/l3: vexpression →  • vexpression "-" vexpression
      {}
    224/l3: vexpression →  • vexpression "+" vexpression
      {}
    225/r5: vexpression →  • vexpression UNOP
      {}
    226/n1: vexpression →  • vvexpression
      {}
    227/n1: interpolation →  • interpolation.string
      {}
    228/n1: interpolation →  • interpolation.heredoc
      {}
    229/n1: object →  • "{" "}"
      {}
    230/n1: array →  • "[" "]"
      {}
    231/n1: function →  • "->" function.arguments.maybe block
      {}
    232/n1: heredoc →  • HEREDOC
      {}
    233/n1: heredoc →  • IHEREDOC
      {}
    234/n1: vvexpression →  • vexpression "." IDENTIFIER
      {}
    235/n1: vvexpression →  • vexpression "[" vexpression "]"
      {}
    236/n1: vvexpression →  • IDENTIFIER
      {}
    237/n1: interpolation.string →  • ISTRING_BEGIN vexpression interpolation.string.finish
      {}
    238/n1: interpolation.heredoc →  • IHEREDOC_BEGIN vexpression interpolation.heredoc.finish
      {}
    transitions:
      vexpression: State 73
      NUMBER: State 25
      ISTRING: State 26
      SSTRING: State 27
      KEYWORD: State 28
      REGEX: State 29
      interpolation: State 30
      "+": State 31
      "-": State 32
      object: State 33
      array: State 34
      function: State 35
      PREUNOP: State 36
      UNOP: State 37
      HEREDOC_REF: State 38
      IHEREDOC_REF: State 39
      "(": State 40
      heredoc: State 41
      vvexpression: State 14
      interpolation.string: State 43
      interpolation.heredoc: State 44
      "{": State 45
      "[": State 46
      "->": State 47
      HEREDOC: State 48
      IHEREDOC: State 49
      IDENTIFIER: State 42
      ISTRING_BEGIN: State 50
      IHEREDOC_BEGIN: State 51

  State 32:
    239/l3: vexpression → "-" • vexpression
      {}
    240/n1: vexpression →  • NUMBER
      {}
    241/n1: vexpression →  • ISTRING
      {}
    242/n1: vexpression →  • SSTRING
      {}
    243/n1: vexpression →  • KEYWORD
      {}
    244/n1: vexpression →  • REGEX
      {}
    245/n1: vexpression →  • interpolation
      {}
    246/l3: vexpression →  • "+" vexpression
      {}
    247/l3: vexpression →  • "-" vexpression
      {}
    248/n1: vexpression →  • object
      {}
    249/n1: vexpression →  • array
      {}
    250/n1: vexpression →  • function
      {}
    251/n1: vexpression →  • PREUNOP vexpression
      {}
    252/r5: vexpression →  • UNOP vexpression
      {}
    253/n1: vexpression →  • HEREDOC_REF
      {}
    254/n1: vexpression →  • IHEREDOC_REF
      {}
    255/n1: vexpression →  • "(" vexpression ")"
      {}
    256/n1: vexpression →  • heredoc
      {}
    257/n1: vexpression →  • vexpression "(" vexpression.parameters.maybe ")"
      {}
    258/l4: vexpression →  • vexpression ".." vexpression
      {}
    259/l4: vexpression →  • vexpression "..." vexpression
      {}
    260/l3: vexpression →  • vexpression BINOP vexpression
      {}
    261/l3: vexpression →  • vexpression "-" vexpression
      {}
    262/l3: vexpression →  • vexpression "+" vexpression
      {}
    263/r5: vexpression →  • vexpression UNOP
      {}
    264/n1: vexpression →  • vvexpression
      {}
    265/n1: interpolation →  • interpolation.string
      {}
    266/n1: interpolation →  • interpolation.heredoc
      {}
    267/n1: object →  • "{" "}"
      {}
    268/n1: array →  • "[" "]"
      {}
    269/n1: function →  • "->" function.arguments.maybe block
      {}
    270/n1: heredoc →  • HEREDOC
      {}
    271/n1: heredoc →  • IHEREDOC
      {}
    272/n1: vvexpression →  • vexpression "." IDENTIFIER
      {}
    273/n1: vvexpression →  • vexpression "[" vexpression "]"
      {}
    274/n1: vvexpression →  • IDENTIFIER
      {}
    275/n1: interpolation.string →  • ISTRING_BEGIN vexpression interpolation.string.finish
      {}
    276/n1: interpolation.heredoc →  • IHEREDOC_BEGIN vexpression interpolation.heredoc.finish
      {}
    transitions:
      vexpression: State 74
      NUMBER: State 25
      ISTRING: State 26
      SSTRING: State 27
      KEYWORD: State 28
      REGEX: State 29
      interpolation: State 30
      "+": State 31
      "-": State 32
      object: State 33
      array: State 34
      function: State 35
      PREUNOP: State 36
      UNOP: State 37
      HEREDOC_REF: State 38
      IHEREDOC_REF: State 39
      "(": State 40
      heredoc: State 41
      vvexpression: State 14
      interpolation.string: State 43
      interpolation.heredoc: State 44
      "{": State 45
      "[": State 46
      "->": State 47
      HEREDOC: State 48
      IHEREDOC: State 49
      IDENTIFIER: State 42
      ISTRING_BEGIN: State 50
      IHEREDOC_BEGIN: State 51

  State 33:
    277/n1: vexpression → object •
      {$end, "if", "unless", "class", "module", "while", "for", "return", ACTION, "try", ":", NUMBER, ISTRING, SSTRING, KEYWORD, REGEX, ISTRING_BEGIN, IHEREDOC_BEGIN, "+", "-", "{", "[", "->", PREUNOP, UNOP, HEREDOC_REF, IHEREDOC_REF, "(", HEREDOC, IHEREDOC, "..", "...", BINOP, ".", IDENTIFIER, "\\n", "}", "]", ")", ","}
    reductions:
      $default: Rule 27

  State 34:
    278/n1: vexpression → array •
      {$end, "if", "unless", "class", "module", "while", "for", "return", ACTION, "try", ":", NUMBER, ISTRING, SSTRING, KEYWORD, REGEX, ISTRING_BEGIN, IHEREDOC_BEGIN, "+", "-", "{", "[", "->", PREUNOP, UNOP, HEREDOC_REF, IHEREDOC_REF, "(", HEREDOC, IHEREDOC, "..", "...", BINOP, ".", IDENTIFIER, "\\n", "}", "]", ")", ","}
    reductions:
      $default: Rule 28

  State 35:
    279/n1: vexpression → function •
      {$end, "if", "unless", "class", "module", "while", "for", "return", ACTION, "try", ":", NUMBER, ISTRING, SSTRING, KEYWORD, REGEX, ISTRING_BEGIN, IHEREDOC_BEGIN, "+", "-", "{", "[", "->", PREUNOP, UNOP, HEREDOC_REF, IHEREDOC_REF, "(", HEREDOC, IHEREDOC, "..", "...", BINOP, ".", IDENTIFIER, "\\n", "}", "]", ")", ","}
    reductions:
      $default: Rule 29

  State 36:
    280/n1: vexpression → PREUNOP • vexpression
      {}
    281/n1: vexpression →  • NUMBER
      {}
    282/n1: vexpression →  • ISTRING
      {}
    283/n1: vexpression →  • SSTRING
      {}
    284/n1: vexpression →  • KEYWORD
      {}
    285/n1: vexpression →  • REGEX
      {}
    286/n1: vexpression →  • interpolation
      {}
    287/l3: vexpression →  • "+" vexpression
      {}
    288/l3: vexpression →  • "-" vexpression
      {}
    289/n1: vexpression →  • object
      {}
    290/n1: vexpression →  • array
      {}
    291/n1: vexpression →  • function
      {}
    292/n1: vexpression →  • PREUNOP vexpression
      {}
    293/r5: vexpression →  • UNOP vexpression
      {}
    294/n1: vexpression →  • HEREDOC_REF
      {}
    295/n1: vexpression →  • IHEREDOC_REF
      {}
    296/n1: vexpression →  • "(" vexpression ")"
      {}
    297/n1: vexpression →  • heredoc
      {}
    298/n1: vexpression →  • vexpression "(" vexpression.parameters.maybe ")"
      {}
    299/l4: vexpression →  • vexpression ".." vexpression
      {}
    300/l4: vexpression →  • vexpression "..." vexpression
      {}
    301/l3: vexpression →  • vexpression BINOP vexpression
      {}
    302/l3: vexpression →  • vexpression "-" vexpression
      {}
    303/l3: vexpression →  • vexpression "+" vexpression
      {}
    304/r5: vexpression →  • vexpression UNOP
      {}
    305/n1: vexpression →  • vvexpression
      {}
    306/n1: interpolation →  • interpolation.string
      {}
    307/n1: interpolation →  • interpolation.heredoc
      {}
    308/n1: object →  • "{" "}"
      {}
    309/n1: array →  • "[" "]"
      {}
    310/n1: function →  • "->" function.arguments.maybe block
      {}
    311/n1: heredoc →  • HEREDOC
      {}
    312/n1: heredoc →  • IHEREDOC
      {}
    313/n1: vvexpression →  • vexpression "." IDENTIFIER
      {}
    314/n1: vvexpression →  • vexpression "[" vexpression "]"
      {}
    315/n1: vvexpression →  • IDENTIFIER
      {}
    316/n1: interpolation.string →  • ISTRING_BEGIN vexpression interpolation.string.finish
      {}
    317/n1: interpolation.heredoc →  • IHEREDOC_BEGIN vexpression interpolation.heredoc.finish
      {}
    transitions:
      vexpression: State 75
      NUMBER: State 25
      ISTRING: State 26
      SSTRING: State 27
      KEYWORD: State 28
      REGEX: State 29
      interpolation: State 30
      "+": State 31
      "-": State 32
      object: State 33
      array: State 34
      function: State 35
      PREUNOP: State 36
      UNOP: State 37
      HEREDOC_REF: State 38
      IHEREDOC_REF: State 39
      "(": State 40
      heredoc: State 41
      vvexpression: State 14
      interpolation.string: State 43
      interpolation.heredoc: State 44
      "{": State 45
      "[": State 46
      "->": State 47
      HEREDOC: State 48
      IHEREDOC: State 49
      IDENTIFIER: State 42
      ISTRING_BEGIN: State 50
      IHEREDOC_BEGIN: State 51

  State 37:
    318/r5: vexpression → UNOP • vexpression
      {}
    319/n1: vexpression →  • NUMBER
      {}
    320/n1: vexpression →  • ISTRING
      {}
    321/n1: vexpression →  • SSTRING
      {}
    322/n1: vexpression →  • KEYWORD
      {}
    323/n1: vexpression →  • REGEX
      {}
    324/n1: vexpression →  • interpolation
      {}
    325/l3: vexpression →  • "+" vexpression
      {}
    326/l3: vexpression →  • "-" vexpression
      {}
    327/n1: vexpression →  • object
      {}
    328/n1: vexpression →  • array
      {}
    329/n1: vexpression →  • function
      {}
    330/n1: vexpression →  • PREUNOP vexpression
      {}
    331/r5: vexpression →  • UNOP vexpression
      {}
    332/n1: vexpression →  • HEREDOC_REF
      {}
    333/n1: vexpression →  • IHEREDOC_REF
      {}
    334/n1: vexpression →  • "(" vexpression ")"
      {}
    335/n1: vexpression →  • heredoc
      {}
    336/n1: vexpression →  • vexpression "(" vexpression.parameters.maybe ")"
      {}
    337/l4: vexpression →  • vexpression ".." vexpression
      {}
    338/l4: vexpression →  • vexpression "..." vexpression
      {}
    339/l3: vexpression →  • vexpression BINOP vexpression
      {}
    340/l3: vexpression →  • vexpression "-" vexpression
      {}
    341/l3: vexpression →  • vexpression "+" vexpression
      {}
    342/r5: vexpression →  • vexpression UNOP
      {}
    343/n1: vexpression →  • vvexpression
      {}
    344/n1: interpolation →  • interpolation.string
      {}
    345/n1: interpolation →  • interpolation.heredoc
      {}
    346/n1: object →  • "{" "}"
      {}
    347/n1: array →  • "[" "]"
      {}
    348/n1: function →  • "->" function.arguments.maybe block
      {}
    349/n1: heredoc →  • HEREDOC
      {}
    350/n1: heredoc →  • IHEREDOC
      {}
    351/n1: vvexpression →  • vexpression "." IDENTIFIER
      {}
    352/n1: vvexpression →  • vexpression "[" vexpression "]"
      {}
    353/n1: vvexpression →  • IDENTIFIER
      {}
    354/n1: interpolation.string →  • ISTRING_BEGIN vexpression interpolation.string.finish
      {}
    355/n1: interpolation.heredoc →  • IHEREDOC_BEGIN vexpression interpolation.heredoc.finish
      {}
    transitions:
      vexpression: State 76
      NUMBER: State 25
      ISTRING: State 26
      SSTRING: State 27
      KEYWORD: State 28
      REGEX: State 29
      interpolation: State 30
      "+": State 31
      "-": State 32
      object: State 33
      array: State 34
      function: State 35
      PREUNOP: State 36
      UNOP: State 37
      HEREDOC_REF: State 38
      IHEREDOC_REF: State 39
      "(": State 40
      heredoc: State 41
      vvexpression: State 14
      interpolation.string: State 43
      interpolation.heredoc: State 44
      "{": State 45
      "[": State 46
      "->": State 47
      HEREDOC: State 48
      IHEREDOC: State 49
      IDENTIFIER: State 42
      ISTRING_BEGIN: State 50
      IHEREDOC_BEGIN: State 51

  State 38:
    356/n1: vexpression → HEREDOC_REF •
      {$end, "if", "unless", "class", "module", "while", "for", "return", ACTION, "try", ":", NUMBER, ISTRING, SSTRING, KEYWORD, REGEX, ISTRING_BEGIN, IHEREDOC_BEGIN, "+", "-", "{", "[", "->", PREUNOP, UNOP, HEREDOC_REF, IHEREDOC_REF, "(", HEREDOC, IHEREDOC, "..", "...", BINOP, ".", IDENTIFIER, "\\n", "}", "]", ")", ","}
    reductions:
      $default: Rule 32

  State 39:
    357/n1: vexpression → IHEREDOC_REF •
      {$end, "if", "unless", "class", "module", "while", "for", "return", ACTION, "try", ":", NUMBER, ISTRING, SSTRING, KEYWORD, REGEX, ISTRING_BEGIN, IHEREDOC_BEGIN, "+", "-", "{", "[", "->", PREUNOP, UNOP, HEREDOC_REF, IHEREDOC_REF, "(", HEREDOC, IHEREDOC, "..", "...", BINOP, ".", IDENTIFIER, "\\n", "}", "]", ")", ","}
    reductions:
      $default: Rule 33

  State 40:
    358/n1: vexpression → "(" • vexpression ")"
      {}
    359/n1: vexpression →  • NUMBER
      {}
    360/n1: vexpression →  • ISTRING
      {}
    361/n1: vexpression →  • SSTRING
      {}
    362/n1: vexpression →  • KEYWORD
      {}
    363/n1: vexpression →  • REGEX
      {}
    364/n1: vexpression →  • interpolation
      {}
    365/l3: vexpression →  • "+" vexpression
      {}
    366/l3: vexpression →  • "-" vexpression
      {}
    367/n1: vexpression →  • object
      {}
    368/n1: vexpression →  • array
      {}
    369/n1: vexpression →  • function
      {}
    370/n1: vexpression →  • PREUNOP vexpression
      {}
    371/r5: vexpression →  • UNOP vexpression
      {}
    372/n1: vexpression →  • HEREDOC_REF
      {}
    373/n1: vexpression →  • IHEREDOC_REF
      {}
    374/n1: vexpression →  • "(" vexpression ")"
      {}
    375/n1: vexpression →  • heredoc
      {}
    376/n1: vexpression →  • vexpression "(" vexpression.parameters.maybe ")"
      {}
    377/l4: vexpression →  • vexpression ".." vexpression
      {}
    378/l4: vexpression →  • vexpression "..." vexpression
      {}
    379/l3: vexpression →  • vexpression BINOP vexpression
      {}
    380/l3: vexpression →  • vexpression "-" vexpression
      {}
    381/l3: vexpression →  • vexpression "+" vexpression
      {}
    382/r5: vexpression →  • vexpression UNOP
      {}
    383/n1: vexpression →  • vvexpression
      {}
    384/n1: interpolation →  • interpolation.string
      {}
    385/n1: interpolation →  • interpolation.heredoc
      {}
    386/n1: object →  • "{" "}"
      {}
    387/n1: array →  • "[" "]"
      {}
    388/n1: function →  • "->" function.arguments.maybe block
      {}
    389/n1: heredoc →  • HEREDOC
      {}
    390/n1: heredoc →  • IHEREDOC
      {}
    391/n1: vvexpression →  • vexpression "." IDENTIFIER
      {}
    392/n1: vvexpression →  • vexpression "[" vexpression "]"
      {}
    393/n1: vvexpression →  • IDENTIFIER
      {}
    394/n1: interpolation.string →  • ISTRING_BEGIN vexpression interpolation.string.finish
      {}
    395/n1: interpolation.heredoc →  • IHEREDOC_BEGIN vexpression interpolation.heredoc.finish
      {}
    transitions:
      vexpression: State 77
      NUMBER: State 25
      ISTRING: State 26
      SSTRING: State 27
      KEYWORD: State 28
      REGEX: State 29
      interpolation: State 30
      "+": State 31
      "-": State 32
      object: State 33
      array: State 34
      function: State 35
      PREUNOP: State 36
      UNOP: State 37
      HEREDOC_REF: State 38
      IHEREDOC_REF: State 39
      "(": State 40
      heredoc: State 41
      vvexpression: State 14
      interpolation.string: State 43
      interpolation.heredoc: State 44
      "{": State 45
      "[": State 46
      "->": State 47
      HEREDOC: State 48
      IHEREDOC: State 49
      IDENTIFIER: State 42
      ISTRING_BEGIN: State 50
      IHEREDOC_BEGIN: State 51

  State 41:
    396/n1: vexpression → heredoc •
      {$end, "if", "unless", "class", "module", "while", "for", "return", ACTION, "try", ":", NUMBER, ISTRING, SSTRING, KEYWORD, REGEX, ISTRING_BEGIN, IHEREDOC_BEGIN, "+", "-", "{", "[", "->", PREUNOP, UNOP, HEREDOC_REF, IHEREDOC_REF, "(", HEREDOC, IHEREDOC, "..", "...", BINOP, ".", IDENTIFIER, "\\n", "}", "]", ")", ","}
    reductions:
      $default: Rule 35

  State 42:
    397/n1: vvexpression → IDENTIFIER •
      {"=", $end, "if", "unless", "class", "module", "while", "for", "return", ACTION, "try", ":", NUMBER, ISTRING, SSTRING, KEYWORD, REGEX, ISTRING_BEGIN, IHEREDOC_BEGIN, "+", "-", "{", "[", "->", PREUNOP, UNOP, HEREDOC_REF, IHEREDOC_REF, "(", HEREDOC, IHEREDOC, "..", "...", BINOP, ".", IDENTIFIER, "\\n", "}", "]", ")", ","}
    reductions:
      $default: Rule 46

  State 43:
    398/n1: interpolation → interpolation.string •
      {$end, "if", "unless", "class", "module", "while", "for", "return", ACTION, "try", ":", NUMBER, ISTRING, SSTRING, KEYWORD, REGEX, ISTRING_BEGIN, IHEREDOC_BEGIN, "+", "-", "{", "[", "->", PREUNOP, UNOP, HEREDOC_REF, IHEREDOC_REF, "(", HEREDOC, IHEREDOC, "..", "...", BINOP, ".", IDENTIFIER, "\\n", "}", "]", ")", ","}
    reductions:
      $default: Rule 62

  State 44:
    399/n1: interpolation → interpolation.heredoc •
      {$end, "if", "unless", "class", "module", "while", "for", "return", ACTION, "try", ":", NUMBER, ISTRING, SSTRING, KEYWORD, REGEX, ISTRING_BEGIN, IHEREDOC_BEGIN, "+", "-", "{", "[", "->", PREUNOP, UNOP, HEREDOC_REF, IHEREDOC_REF, "(", HEREDOC, IHEREDOC, "..", "...", BINOP, ".", IDENTIFIER, "\\n", "}", "]", ")", ","}
    reductions:
      $default: Rule 63

  State 45:
    400/n1: object → "{" • "}"
      {}
    transitions:
      "}": State 78

  State 46:
    401/n1: array → "[" • "]"
      {}
    transitions:
      "]": State 79

  State 47:
    402/n1: function → "->" • function.arguments.maybe block
      {}
    403/n1: function.arguments.maybe →  • "(" function.arguments.body.maybe ")"
      {}
    404/n1: function.arguments.maybe →  •
      {"{"}
    transitions:
      function.arguments.maybe: State 80
      "(": State 81
    reductions:
      "{": Rule 57

  State 48:
    405/n1: heredoc → HEREDOC •
      {$end, "if", "unless", "class", "module", "while", "for", "return", ACTION, "try", ":", NUMBER, ISTRING, SSTRING, KEYWORD, REGEX, ISTRING_BEGIN, IHEREDOC_BEGIN, "+", "-", "{", "[", "->", PREUNOP, UNOP, HEREDOC_REF, IHEREDOC_REF, "(", HEREDOC, IHEREDOC, "..", "...", BINOP, ".", IDENTIFIER, "\\n", "}", "]", ")", ","}
    reductions:
      $default: Rule 54

  State 49:
    406/n1: heredoc → IHEREDOC •
      {$end, "if", "unless", "class", "module", "while", "for", "return", ACTION, "try", ":", NUMBER, ISTRING, SSTRING, KEYWORD, REGEX, ISTRING_BEGIN, IHEREDOC_BEGIN, "+", "-", "{", "[", "->", PREUNOP, UNOP, HEREDOC_REF, IHEREDOC_REF, "(", HEREDOC, IHEREDOC, "..", "...", BINOP, ".", IDENTIFIER, "\\n", "}", "]", ")", ","}
    reductions:
      $default: Rule 55

  State 50:
    407/n1: interpolation.string → ISTRING_BEGIN • vexpression interpolation.string.finish
      {}
    408/n1: vexpression →  • NUMBER
      {}
    409/n1: vexpression →  • ISTRING
      {}
    410/n1: vexpression →  • SSTRING
      {}
    411/n1: vexpression →  • KEYWORD
      {}
    412/n1: vexpression →  • REGEX
      {}
    413/n1: vexpression →  • interpolation
      {}
    414/l3: vexpression →  • "+" vexpression
      {}
    415/l3: vexpression →  • "-" vexpression
      {}
    416/n1: vexpression →  • object
      {}
    417/n1: vexpression →  • array
      {}
    418/n1: vexpression →  • function
      {}
    419/n1: vexpression →  • PREUNOP vexpression
      {}
    420/r5: vexpression →  • UNOP vexpression
      {}
    421/n1: vexpression →  • HEREDOC_REF
      {}
    422/n1: vexpression →  • IHEREDOC_REF
      {}
    423/n1: vexpression →  • "(" vexpression ")"
      {}
    424/n1: vexpression →  • heredoc
      {}
    425/n1: vexpression →  • vexpression "(" vexpression.parameters.maybe ")"
      {}
    426/l4: vexpression →  • vexpression ".." vexpression
      {}
    427/l4: vexpression →  • vexpression "..." vexpression
      {}
    428/l3: vexpression →  • vexpression BINOP vexpression
      {}
    429/l3: vexpression →  • vexpression "-" vexpression
      {}
    430/l3: vexpression →  • vexpression "+" vexpression
      {}
    431/r5: vexpression →  • vexpression UNOP
      {}
    432/n1: vexpression →  • vvexpression
      {}
    433/n1: interpolation →  • interpolation.string
      {}
    434/n1: interpolation →  • interpolation.heredoc
      {}
    435/n1: object →  • "{" "}"
      {}
    436/n1: array →  • "[" "]"
      {}
    437/n1: function →  • "->" function.arguments.maybe block
      {}
    438/n1: heredoc →  • HEREDOC
      {}
    439/n1: heredoc →  • IHEREDOC
      {}
    440/n1: vvexpression →  • vexpression "." IDENTIFIER
      {}
    441/n1: vvexpression →  • vexpression "[" vexpression "]"
      {}
    442/n1: vvexpression →  • IDENTIFIER
      {}
    443/n1: interpolation.string →  • ISTRING_BEGIN vexpression interpolation.string.finish
      {}
    444/n1: interpolation.heredoc →  • IHEREDOC_BEGIN vexpression interpolation.heredoc.finish
      {}
    transitions:
      vexpression: State 82
      NUMBER: State 25
      ISTRING: State 26
      SSTRING: State 27
      KEYWORD: State 28
      REGEX: State 29
      interpolation: State 30
      "+": State 31
      "-": State 32
      object: State 33
      array: State 34
      function: State 35
      PREUNOP: State 36
      UNOP: State 37
      HEREDOC_REF: State 38
      IHEREDOC_REF: State 39
      "(": State 40
      heredoc: State 41
      vvexpression: State 14
      interpolation.string: State 43
      interpolation.heredoc: State 44
      "{": State 45
      "[": State 46
      "->": State 47
      HEREDOC: State 48
      IHEREDOC: State 49
      IDENTIFIER: State 42
      ISTRING_BEGIN: State 50
      IHEREDOC_BEGIN: State 51

  State 51:
    445/n1: interpolation.heredoc → IHEREDOC_BEGIN • vexpression interpolation.heredoc.finish
      {}
    446/n1: vexpression →  • NUMBER
      {}
    447/n1: vexpression →  • ISTRING
      {}
    448/n1: vexpression →  • SSTRING
      {}
    449/n1: vexpression →  • KEYWORD
      {}
    450/n1: vexpression →  • REGEX
      {}
    451/n1: vexpression →  • interpolation
      {}
    452/l3: vexpression →  • "+" vexpression
      {}
    453/l3: vexpression →  • "-" vexpression
      {}
    454/n1: vexpression →  • object
      {}
    455/n1: vexpression →  • array
      {}
    456/n1: vexpression →  • function
      {}
    457/n1: vexpression →  • PREUNOP vexpression
      {}
    458/r5: vexpression →  • UNOP vexpression
      {}
    459/n1: vexpression →  • HEREDOC_REF
      {}
    460/n1: vexpression →  • IHEREDOC_REF
      {}
    461/n1: vexpression →  • "(" vexpression ")"
      {}
    462/n1: vexpression →  • heredoc
      {}
    463/n1: vexpression →  • vexpression "(" vexpression.parameters.maybe ")"
      {}
    464/l4: vexpression →  • vexpression ".." vexpression
      {}
    465/l4: vexpression →  • vexpression "..." vexpression
      {}
    466/l3: vexpression →  • vexpression BINOP vexpression
      {}
    467/l3: vexpression →  • vexpression "-" vexpression
      {}
    468/l3: vexpression →  • vexpression "+" vexpression
      {}
    469/r5: vexpression →  • vexpression UNOP
      {}
    470/n1: vexpression →  • vvexpression
      {}
    471/n1: interpolation →  • interpolation.string
      {}
    472/n1: interpolation →  • interpolation.heredoc
      {}
    473/n1: object →  • "{" "}"
      {}
    474/n1: array →  • "[" "]"
      {}
    475/n1: function →  • "->" function.arguments.maybe block
      {}
    476/n1: heredoc →  • HEREDOC
      {}
    477/n1: heredoc →  • IHEREDOC
      {}
    478/n1: vvexpression →  • vexpression "." IDENTIFIER
      {}
    479/n1: vvexpression →  • vexpression "[" vexpression "]"
      {}
    480/n1: vvexpression →  • IDENTIFIER
      {}
    481/n1: interpolation.string →  • ISTRING_BEGIN vexpression interpolation.string.finish
      {}
    482/n1: interpolation.heredoc →  • IHEREDOC_BEGIN vexpression interpolation.heredoc.finish
      {}
    transitions:
      vexpression: State 83
      NUMBER: State 25
      ISTRING: State 26
      SSTRING: State 27
      KEYWORD: State 28
      REGEX: State 29
      interpolation: State 30
      "+": State 31
      "-": State 32
      object: State 33
      array: State 34
      function: State 35
      PREUNOP: State 36
      UNOP: State 37
      HEREDOC_REF: State 38
      IHEREDOC_REF: State 39
      "(": State 40
      heredoc: State 41
      vvexpression: State 14
      interpolation.string: State 43
      interpolation.heredoc: State 44
      "{": State 45
      "[": State 46
      "->": State 47
      HEREDOC: State 48
      IHEREDOC: State 49
      IDENTIFIER: State 42
      ISTRING_BEGIN: State 50
      IHEREDOC_BEGIN: State 51

  State 52:
    483/n0: $start → main $end •
      {}
    accepting:
      $end: Rule 0

  State 53:
    484/n1: expressions → expressions expression •
      {$end, "if", "unless", "class", "module", "while", "for", "return", ACTION, "try", ":", NUMBER, ISTRING, SSTRING, KEYWORD, REGEX, ISTRING_BEGIN, IHEREDOC_BEGIN, "+", "-", "{", "[", "->", PREUNOP, UNOP, HEREDOC_REF, IHEREDOC_REF, "(", HEREDOC, IHEREDOC, "..", "...", BINOP, ".", IDENTIFIER, "\\n", "}", "]"}
    reductions:
      $default: Rule 4

  State 54:
    485/n1: vexpression → vexpression "(" • vexpression.parameters.maybe ")"
      {}
    486/n1: vexpression.parameters.maybe →  • vexpression.parameters
      {}
    487/n1: vexpression.parameters.maybe →  •
      {")"}
    488/n1: vexpression.parameters →  • vexpression.parameters "," vexpression
      {}
    489/n1: vexpression.parameters →  • vexpression
      {}
    490/n1: vexpression →  • NUMBER
      {}
    491/n1: vexpression →  • ISTRING
      {}
    492/n1: vexpression →  • SSTRING
      {}
    493/n1: vexpression →  • KEYWORD
      {}
    494/n1: vexpression →  • REGEX
      {}
    495/n1: vexpression →  • interpolation
      {}
    496/l3: vexpression →  • "+" vexpression
      {}
    497/l3: vexpression →  • "-" vexpression
      {}
    498/n1: vexpression →  • object
      {}
    499/n1: vexpression →  • array
      {}
    500/n1: vexpression →  • function
      {}
    501/n1: vexpression →  • PREUNOP vexpression
      {}
    502/r5: vexpression →  • UNOP vexpression
      {}
    503/n1: vexpression →  • HEREDOC_REF
      {}
    504/n1: vexpression →  • IHEREDOC_REF
      {}
    505/n1: vexpression →  • "(" vexpression ")"
      {}
    506/n1: vexpression →  • heredoc
      {}
    507/n1: vexpression →  • vexpression "(" vexpression.parameters.maybe ")"
      {}
    508/l4: vexpression →  • vexpression ".." vexpression
      {}
    509/l4: vexpression →  • vexpression "..." vexpression
      {}
    510/l3: vexpression →  • vexpression BINOP vexpression
      {}
    511/l3: vexpression →  • vexpression "-" vexpression
      {}
    512/l3: vexpression →  • vexpression "+" vexpression
      {}
    513/r5: vexpression →  • vexpression UNOP
      {}
    514/n1: vexpression →  • vvexpression
      {}
    515/n1: interpolation →  • interpolation.string
      {}
    516/n1: interpolation →  • interpolation.heredoc
      {}
    517/n1: object →  • "{" "}"
      {}
    518/n1: array →  • "[" "]"
      {}
    519/n1: function →  • "->" function.arguments.maybe block
      {}
    520/n1: heredoc →  • HEREDOC
      {}
    521/n1: heredoc →  • IHEREDOC
      {}
    522/n1: vvexpression →  • vexpression "." IDENTIFIER
      {}
    523/n1: vvexpression →  • vexpression "[" vexpression "]"
      {}
    524/n1: vvexpression →  • IDENTIFIER
      {}
    525/n1: interpolation.string →  • ISTRING_BEGIN vexpression interpolation.string.finish
      {}
    526/n1: interpolation.heredoc →  • IHEREDOC_BEGIN vexpression interpolation.heredoc.finish
      {}
    transitions:
      vexpression.parameters.maybe: State 84
      vexpression.parameters: State 85
      vexpression: State 86
      NUMBER: State 25
      ISTRING: State 26
      SSTRING: State 27
      KEYWORD: State 28
      REGEX: State 29
      interpolation: State 30
      "+": State 31
      "-": State 32
      object: State 33
      array: State 34
      function: State 35
      PREUNOP: State 36
      UNOP: State 37
      HEREDOC_REF: State 38
      IHEREDOC_REF: State 39
      "(": State 40
      heredoc: State 41
      vvexpression: State 14
      interpolation.string: State 43
      interpolation.heredoc: State 44
      "{": State 45
      "[": State 46
      "->": State 47
      HEREDOC: State 48
      IHEREDOC: State 49
      IDENTIFIER: State 42
      ISTRING_BEGIN: State 50
      IHEREDOC_BEGIN: State 51
    reductions:
      ")": Rule 48

  State 55:
    527/l4: vexpression → vexpression ".." • vexpression
      {}
    528/n1: vexpression →  • NUMBER
      {}
    529/n1: vexpression →  • ISTRING
      {}
    530/n1: vexpression →  • SSTRING
      {}
    531/n1: vexpression →  • KEYWORD
      {}
    532/n1: vexpression →  • REGEX
      {}
    533/n1: vexpression →  • interpolation
      {}
    534/l3: vexpression →  • "+" vexpression
      {}
    535/l3: vexpression →  • "-" vexpression
      {}
    536/n1: vexpression →  • object
      {}
    537/n1: vexpression →  • array
      {}
    538/n1: vexpression →  • function
      {}
    539/n1: vexpression →  • PREUNOP vexpression
      {}
    540/r5: vexpression →  • UNOP vexpression
      {}
    541/n1: vexpression →  • HEREDOC_REF
      {}
    542/n1: vexpression →  • IHEREDOC_REF
      {}
    543/n1: vexpression →  • "(" vexpression ")"
      {}
    544/n1: vexpression →  • heredoc
      {}
    545/n1: vexpression →  • vexpression "(" vexpression.parameters.maybe ")"
      {}
    546/l4: vexpression →  • vexpression ".." vexpression
      {}
    547/l4: vexpression →  • vexpression "..." vexpression
      {}
    548/l3: vexpression →  • vexpression BINOP vexpression
      {}
    549/l3: vexpression →  • vexpression "-" vexpression
      {}
    550/l3: vexpression →  • vexpression "+" vexpression
      {}
    551/r5: vexpression →  • vexpression UNOP
      {}
    552/n1: vexpression →  • vvexpression
      {}
    553/n1: interpolation →  • interpolation.string
      {}
    554/n1: interpolation →  • interpolation.heredoc
      {}
    555/n1: object →  • "{" "}"
      {}
    556/n1: array →  • "[" "]"
      {}
    557/n1: function →  • "->" function.arguments.maybe block
      {}
    558/n1: heredoc →  • HEREDOC
      {}
    559/n1: heredoc →  • IHEREDOC
      {}
    560/n1: vvexpression →  • vexpression "." IDENTIFIER
      {}
    561/n1: vvexpression →  • vexpression "[" vexpression "]"
      {}
    562/n1: vvexpression →  • IDENTIFIER
      {}
    563/n1: interpolation.string →  • ISTRING_BEGIN vexpression interpolation.string.finish
      {}
    564/n1: interpolation.heredoc →  • IHEREDOC_BEGIN vexpression interpolation.heredoc.finish
      {}
    transitions:
      vexpression: State 87
      NUMBER: State 25
      ISTRING: State 26
      SSTRING: State 27
      KEYWORD: State 28
      REGEX: State 29
      interpolation: State 30
      "+": State 31
      "-": State 32
      object: State 33
      array: State 34
      function: State 35
      PREUNOP: State 36
      UNOP: State 37
      HEREDOC_REF: State 38
      IHEREDOC_REF: State 39
      "(": State 40
      heredoc: State 41
      vvexpression: State 14
      interpolation.string: State 43
      interpolation.heredoc: State 44
      "{": State 45
      "[": State 46
      "->": State 47
      HEREDOC: State 48
      IHEREDOC: State 49
      IDENTIFIER: State 42
      ISTRING_BEGIN: State 50
      IHEREDOC_BEGIN: State 51

  State 56:
    565/l4: vexpression → vexpression "..." • vexpression
      {}
    566/n1: vexpression →  • NUMBER
      {}
    567/n1: vexpression →  • ISTRING
      {}
    568/n1: vexpression →  • SSTRING
      {}
    569/n1: vexpression →  • KEYWORD
      {}
    570/n1: vexpression →  • REGEX
      {}
    571/n1: vexpression →  • interpolation
      {}
    572/l3: vexpression →  • "+" vexpression
      {}
    573/l3: vexpression →  • "-" vexpression
      {}
    574/n1: vexpression →  • object
      {}
    575/n1: vexpression →  • array
      {}
    576/n1: vexpression →  • function
      {}
    577/n1: vexpression →  • PREUNOP vexpression
      {}
    578/r5: vexpression →  • UNOP vexpression
      {}
    579/n1: vexpression →  • HEREDOC_REF
      {}
    580/n1: vexpression →  • IHEREDOC_REF
      {}
    581/n1: vexpression →  • "(" vexpression ")"
      {}
    582/n1: vexpression →  • heredoc
      {}
    583/n1: vexpression →  • vexpression "(" vexpression.parameters.maybe ")"
      {}
    584/l4: vexpression →  • vexpression ".." vexpression
      {}
    585/l4: vexpression →  • vexpression "..." vexpression
      {}
    586/l3: vexpression →  • vexpression BINOP vexpression
      {}
    587/l3: vexpression →  • vexpression "-" vexpression
      {}
    588/l3: vexpression →  • vexpression "+" vexpression
      {}
    589/r5: vexpression →  • vexpression UNOP
      {}
    590/n1: vexpression →  • vvexpression
      {}
    591/n1: interpolation →  • interpolation.string
      {}
    592/n1: interpolation →  • interpolation.heredoc
      {}
    593/n1: object →  • "{" "}"
      {}
    594/n1: array →  • "[" "]"
      {}
    595/n1: function →  • "->" function.arguments.maybe block
      {}
    596/n1: heredoc →  • HEREDOC
      {}
    597/n1: heredoc →  • IHEREDOC
      {}
    598/n1: vvexpression →  • vexpression "." IDENTIFIER
      {}
    599/n1: vvexpression →  • vexpression "[" vexpression "]"
      {}
    600/n1: vvexpression →  • IDENTIFIER
      {}
    601/n1: interpolation.string →  • ISTRING_BEGIN vexpression interpolation.string.finish
      {}
    602/n1: interpolation.heredoc →  • IHEREDOC_BEGIN vexpression interpolation.heredoc.finish
      {}
    transitions:
      vexpression: State 88
      NUMBER: State 25
      ISTRING: State 26
      SSTRING: State 27
      KEYWORD: State 28
      REGEX: State 29
      interpolation: State 30
      "+": State 31
      "-": State 32
      object: State 33
      array: State 34
      function: State 35
      PREUNOP: State 36
      UNOP: State 37
      HEREDOC_REF: State 38
      IHEREDOC_REF: State 39
      "(": State 40
      heredoc: State 41
      vvexpression: State 14
      interpolation.string: State 43
      interpolation.heredoc: State 44
      "{": State 45
      "[": State 46
      "->": State 47
      HEREDOC: State 48
      IHEREDOC: State 49
      IDENTIFIER: State 42
      ISTRING_BEGIN: State 50
      IHEREDOC_BEGIN: State 51

  State 57:
    603/l3: vexpression → vexpression BINOP • vexpression
      {}
    604/n1: vexpression →  • NUMBER
      {}
    605/n1: vexpression →  • ISTRING
      {}
    606/n1: vexpression →  • SSTRING
      {}
    607/n1: vexpression →  • KEYWORD
      {}
    608/n1: vexpression →  • REGEX
      {}
    609/n1: vexpression →  • interpolation
      {}
    610/l3: vexpression →  • "+" vexpression
      {}
    611/l3: vexpression →  • "-" vexpression
      {}
    612/n1: vexpression →  • object
      {}
    613/n1: vexpression →  • array
      {}
    614/n1: vexpression →  • function
      {}
    615/n1: vexpression →  • PREUNOP vexpression
      {}
    616/r5: vexpression →  • UNOP vexpression
      {}
    617/n1: vexpression →  • HEREDOC_REF
      {}
    618/n1: vexpression →  • IHEREDOC_REF
      {}
    619/n1: vexpression →  • "(" vexpression ")"
      {}
    620/n1: vexpression →  • heredoc
      {}
    621/n1: vexpression →  • vexpression "(" vexpression.parameters.maybe ")"
      {}
    622/l4: vexpression →  • vexpression ".." vexpression
      {}
    623/l4: vexpression →  • vexpression "..." vexpression
      {}
    624/l3: vexpression →  • vexpression BINOP vexpression
      {}
    625/l3: vexpression →  • vexpression "-" vexpression
      {}
    626/l3: vexpression →  • vexpression "+" vexpression
      {}
    627/r5: vexpression →  • vexpression UNOP
      {}
    628/n1: vexpression →  • vvexpression
      {}
    629/n1: interpolation →  • interpolation.string
      {}
    630/n1: interpolation →  • interpolation.heredoc
      {}
    631/n1: object →  • "{" "}"
      {}
    632/n1: array →  • "[" "]"
      {}
    633/n1: function →  • "->" function.arguments.maybe block
      {}
    634/n1: heredoc →  • HEREDOC
      {}
    635/n1: heredoc →  • IHEREDOC
      {}
    636/n1: vvexpression →  • vexpression "." IDENTIFIER
      {}
    637/n1: vvexpression →  • vexpression "[" vexpression "]"
      {}
    638/n1: vvexpression →  • IDENTIFIER
      {}
    639/n1: interpolation.string →  • ISTRING_BEGIN vexpression interpolation.string.finish
      {}
    640/n1: interpolation.heredoc →  • IHEREDOC_BEGIN vexpression interpolation.heredoc.finish
      {}
    transitions:
      vexpression: State 89
      NUMBER: State 25
      ISTRING: State 26
      SSTRING: State 27
      KEYWORD: State 28
      REGEX: State 29
      interpolation: State 30
      "+": State 31
      "-": State 32
      object: State 33
      array: State 34
      function: State 35
      PREUNOP: State 36
      UNOP: State 37
      HEREDOC_REF: State 38
      IHEREDOC_REF: State 39
      "(": State 40
      heredoc: State 41
      vvexpression: State 14
      interpolation.string: State 43
      interpolation.heredoc: State 44
      "{": State 45
      "[": State 46
      "->": State 47
      HEREDOC: State 48
      IHEREDOC: State 49
      IDENTIFIER: State 42
      ISTRING_BEGIN: State 50
      IHEREDOC_BEGIN: State 51

  State 58:
    641/l3: vexpression → vexpression "-" • vexpression
      {}
    642/n1: vexpression →  • NUMBER
      {}
    643/n1: vexpression →  • ISTRING
      {}
    644/n1: vexpression →  • SSTRING
      {}
    645/n1: vexpression →  • KEYWORD
      {}
    646/n1: vexpression →  • REGEX
      {}
    647/n1: vexpression →  • interpolation
      {}
    648/l3: vexpression →  • "+" vexpression
      {}
    649/l3: vexpression →  • "-" vexpression
      {}
    650/n1: vexpression →  • object
      {}
    651/n1: vexpression →  • array
      {}
    652/n1: vexpression →  • function
      {}
    653/n1: vexpression →  • PREUNOP vexpression
      {}
    654/r5: vexpression →  • UNOP vexpression
      {}
    655/n1: vexpression →  • HEREDOC_REF
      {}
    656/n1: vexpression →  • IHEREDOC_REF
      {}
    657/n1: vexpression →  • "(" vexpression ")"
      {}
    658/n1: vexpression →  • heredoc
      {}
    659/n1: vexpression →  • vexpression "(" vexpression.parameters.maybe ")"
      {}
    660/l4: vexpression →  • vexpression ".." vexpression
      {}
    661/l4: vexpression →  • vexpression "..." vexpression
      {}
    662/l3: vexpression →  • vexpression BINOP vexpression
      {}
    663/l3: vexpression →  • vexpression "-" vexpression
      {}
    664/l3: vexpression →  • vexpression "+" vexpression
      {}
    665/r5: vexpression →  • vexpression UNOP
      {}
    666/n1: vexpression →  • vvexpression
      {}
    667/n1: interpolation →  • interpolation.string
      {}
    668/n1: interpolation →  • interpolation.heredoc
      {}
    669/n1: object →  • "{" "}"
      {}
    670/n1: array →  • "[" "]"
      {}
    671/n1: function →  • "->" function.arguments.maybe block
      {}
    672/n1: heredoc →  • HEREDOC
      {}
    673/n1: heredoc →  • IHEREDOC
      {}
    674/n1: vvexpression →  • vexpression "." IDENTIFIER
      {}
    675/n1: vvexpression →  • vexpression "[" vexpression "]"
      {}
    676/n1: vvexpression →  • IDENTIFIER
      {}
    677/n1: interpolation.string →  • ISTRING_BEGIN vexpression interpolation.string.finish
      {}
    678/n1: interpolation.heredoc →  • IHEREDOC_BEGIN vexpression interpolation.heredoc.finish
      {}
    transitions:
      vexpression: State 90
      NUMBER: State 25
      ISTRING: State 26
      SSTRING: State 27
      KEYWORD: State 28
      REGEX: State 29
      interpolation: State 30
      "+": State 31
      "-": State 32
      object: State 33
      array: State 34
      function: State 35
      PREUNOP: State 36
      UNOP: State 37
      HEREDOC_REF: State 38
      IHEREDOC_REF: State 39
      "(": State 40
      heredoc: State 41
      vvexpression: State 14
      interpolation.string: State 43
      interpolation.heredoc: State 44
      "{": State 45
      "[": State 46
      "->": State 47
      HEREDOC: State 48
      IHEREDOC: State 49
      IDENTIFIER: State 42
      ISTRING_BEGIN: State 50
      IHEREDOC_BEGIN: State 51

  State 59:
    679/l3: vexpression → vexpression "+" • vexpression
      {}
    680/n1: vexpression →  • NUMBER
      {}
    681/n1: vexpression →  • ISTRING
      {}
    682/n1: vexpression →  • SSTRING
      {}
    683/n1: vexpression →  • KEYWORD
      {}
    684/n1: vexpression →  • REGEX
      {}
    685/n1: vexpression →  • interpolation
      {}
    686/l3: vexpression →  • "+" vexpression
      {}
    687/l3: vexpression →  • "-" vexpression
      {}
    688/n1: vexpression →  • object
      {}
    689/n1: vexpression →  • array
      {}
    690/n1: vexpression →  • function
      {}
    691/n1: vexpression →  • PREUNOP vexpression
      {}
    692/r5: vexpression →  • UNOP vexpression
      {}
    693/n1: vexpression →  • HEREDOC_REF
      {}
    694/n1: vexpression →  • IHEREDOC_REF
      {}
    695/n1: vexpression →  • "(" vexpression ")"
      {}
    696/n1: vexpression →  • heredoc
      {}
    697/n1: vexpression →  • vexpression "(" vexpression.parameters.maybe ")"
      {}
    698/l4: vexpression →  • vexpression ".." vexpression
      {}
    699/l4: vexpression →  • vexpression "..." vexpression
      {}
    700/l3: vexpression →  • vexpression BINOP vexpression
      {}
    701/l3: vexpression →  • vexpression "-" vexpression
      {}
    702/l3: vexpression →  • vexpression "+" vexpression
      {}
    703/r5: vexpression →  • vexpression UNOP
      {}
    704/n1: vexpression →  • vvexpression
      {}
    705/n1: interpolation →  • interpolation.string
      {}
    706/n1: interpolation →  • interpolation.heredoc
      {}
    707/n1: object →  • "{" "}"
      {}
    708/n1: array →  • "[" "]"
      {}
    709/n1: function →  • "->" function.arguments.maybe block
      {}
    710/n1: heredoc →  • HEREDOC
      {}
    711/n1: heredoc →  • IHEREDOC
      {}
    712/n1: vvexpression →  • vexpression "." IDENTIFIER
      {}
    713/n1: vvexpression →  • vexpression "[" vexpression "]"
      {}
    714/n1: vvexpression →  • IDENTIFIER
      {}
    715/n1: interpolation.string →  • ISTRING_BEGIN vexpression interpolation.string.finish
      {}
    716/n1: interpolation.heredoc →  • IHEREDOC_BEGIN vexpression interpolation.heredoc.finish
      {}
    transitions:
      vexpression: State 91
      NUMBER: State 25
      ISTRING: State 26
      SSTRING: State 27
      KEYWORD: State 28
      REGEX: State 29
      interpolation: State 30
      "+": State 31
      "-": State 32
      object: State 33
      array: State 34
      function: State 35
      PREUNOP: State 36
      UNOP: State 37
      HEREDOC_REF: State 38
      IHEREDOC_REF: State 39
      "(": State 40
      heredoc: State 41
      vvexpression: State 14
      interpolation.string: State 43
      interpolation.heredoc: State 44
      "{": State 45
      "[": State 46
      "->": State 47
      HEREDOC: State 48
      IHEREDOC: State 49
      IDENTIFIER: State 42
      ISTRING_BEGIN: State 50
      IHEREDOC_BEGIN: State 51

  State 60:
    717/r5: vexpression → vexpression UNOP •
      {$end, "if", "unless", "class", "module", "while", "for", "return", ACTION, "try", ":", NUMBER, ISTRING, SSTRING, KEYWORD, REGEX, ISTRING_BEGIN, IHEREDOC_BEGIN, "+", "-", "{", "[", "->", PREUNOP, UNOP, HEREDOC_REF, IHEREDOC_REF, "(", HEREDOC, IHEREDOC, "..", "...", BINOP, ".", IDENTIFIER, "\\n", "}", "]", ")", ","}
    reductions:
      $default: Rule 42

  State 61:
    718/n1: vvexpression → vexpression "." • IDENTIFIER
      {}
    transitions:
      IDENTIFIER: State 92

  State 62:
    719/n1: vvexpression → vexpression "[" • vexpression "]"
      {}
    720/n1: vexpression →  • NUMBER
      {}
    721/n1: vexpression →  • ISTRING
      {}
    722/n1: vexpression →  • SSTRING
      {}
    723/n1: vexpression →  • KEYWORD
      {}
    724/n1: vexpression →  • REGEX
      {}
    725/n1: vexpression →  • interpolation
      {}
    726/l3: vexpression →  • "+" vexpression
      {}
    727/l3: vexpression →  • "-" vexpression
      {}
    728/n1: vexpression →  • object
      {}
    729/n1: vexpression →  • array
      {}
    730/n1: vexpression →  • function
      {}
    731/n1: vexpression →  • PREUNOP vexpression
      {}
    732/r5: vexpression →  • UNOP vexpression
      {}
    733/n1: vexpression →  • HEREDOC_REF
      {}
    734/n1: vexpression →  • IHEREDOC_REF
      {}
    735/n1: vexpression →  • "(" vexpression ")"
      {}
    736/n1: vexpression →  • heredoc
      {}
    737/n1: vexpression →  • vexpression "(" vexpression.parameters.maybe ")"
      {}
    738/l4: vexpression →  • vexpression ".." vexpression
      {}
    739/l4: vexpression →  • vexpression "..." vexpression
      {}
    740/l3: vexpression →  • vexpression BINOP vexpression
      {}
    741/l3: vexpression →  • vexpression "-" vexpression
      {}
    742/l3: vexpression →  • vexpression "+" vexpression
      {}
    743/r5: vexpression →  • vexpression UNOP
      {}
    744/n1: vexpression →  • vvexpression
      {}
    745/n1: interpolation →  • interpolation.string
      {}
    746/n1: interpolation →  • interpolation.heredoc
      {}
    747/n1: object →  • "{" "}"
      {}
    748/n1: array →  • "[" "]"
      {}
    749/n1: function →  • "->" function.arguments.maybe block
      {}
    750/n1: heredoc →  • HEREDOC
      {}
    751/n1: heredoc →  • IHEREDOC
      {}
    752/n1: vvexpression →  • vexpression "." IDENTIFIER
      {}
    753/n1: vvexpression →  • vexpression "[" vexpression "]"
      {}
    754/n1: vvexpression →  • IDENTIFIER
      {}
    755/n1: interpolation.string →  • ISTRING_BEGIN vexpression interpolation.string.finish
      {}
    756/n1: interpolation.heredoc →  • IHEREDOC_BEGIN vexpression interpolation.heredoc.finish
      {}
    transitions:
      vexpression: State 93
      NUMBER: State 25
      ISTRING: State 26
      SSTRING: State 27
      KEYWORD: State 28
      REGEX: State 29
      interpolation: State 30
      "+": State 31
      "-": State 32
      object: State 33
      array: State 34
      function: State 35
      PREUNOP: State 36
      UNOP: State 37
      HEREDOC_REF: State 38
      IHEREDOC_REF: State 39
      "(": State 40
      heredoc: State 41
      vvexpression: State 14
      interpolation.string: State 43
      interpolation.heredoc: State 44
      "{": State 45
      "[": State 46
      "->": State 47
      HEREDOC: State 48
      IHEREDOC: State 49
      IDENTIFIER: State 42
      ISTRING_BEGIN: State 50
      IHEREDOC_BEGIN: State 51

  State 63:
    757/r2: expression → vvexpression "=" • vexpression
      {}
    758/n1: vexpression →  • NUMBER
      {}
    759/n1: vexpression →  • ISTRING
      {}
    760/n1: vexpression →  • SSTRING
      {}
    761/n1: vexpression →  • KEYWORD
      {}
    762/n1: vexpression →  • REGEX
      {}
    763/n1: vexpression →  • interpolation
      {}
    764/l3: vexpression →  • "+" vexpression
      {}
    765/l3: vexpression →  • "-" vexpression
      {}
    766/n1: vexpression →  • object
      {}
    767/n1: vexpression →  • array
      {}
    768/n1: vexpression →  • function
      {}
    769/n1: vexpression →  • PREUNOP vexpression
      {}
    770/r5: vexpression →  • UNOP vexpression
      {}
    771/n1: vexpression →  • HEREDOC_REF
      {}
    772/n1: vexpression →  • IHEREDOC_REF
      {}
    773/n1: vexpression →  • "(" vexpression ")"
      {}
    774/n1: vexpression →  • heredoc
      {}
    775/n1: vexpression →  • vexpression "(" vexpression.parameters.maybe ")"
      {}
    776/l4: vexpression →  • vexpression ".." vexpression
      {}
    777/l4: vexpression →  • vexpression "..." vexpression
      {}
    778/l3: vexpression →  • vexpression BINOP vexpression
      {}
    779/l3: vexpression →  • vexpression "-" vexpression
      {}
    780/l3: vexpression →  • vexpression "+" vexpression
      {}
    781/r5: vexpression →  • vexpression UNOP
      {}
    782/n1: vexpression →  • vvexpression
      {}
    783/n1: interpolation →  • interpolation.string
      {}
    784/n1: interpolation →  • interpolation.heredoc
      {}
    785/n1: object →  • "{" "}"
      {}
    786/n1: array →  • "[" "]"
      {}
    787/n1: function →  • "->" function.arguments.maybe block
      {}
    788/n1: heredoc →  • HEREDOC
      {}
    789/n1: heredoc →  • IHEREDOC
      {}
    790/n1: vvexpression →  • vexpression "." IDENTIFIER
      {}
    791/n1: vvexpression →  • vexpression "[" vexpression "]"
      {}
    792/n1: vvexpression →  • IDENTIFIER
      {}
    793/n1: interpolation.string →  • ISTRING_BEGIN vexpression interpolation.string.finish
      {}
    794/n1: interpolation.heredoc →  • IHEREDOC_BEGIN vexpression interpolation.heredoc.finish
      {}
    transitions:
      vexpression: State 94
      NUMBER: State 25
      ISTRING: State 26
      SSTRING: State 27
      KEYWORD: State 28
      REGEX: State 29
      interpolation: State 30
      "+": State 31
      "-": State 32
      object: State 33
      array: State 34
      function: State 35
      PREUNOP: State 36
      UNOP: State 37
      HEREDOC_REF: State 38
      IHEREDOC_REF: State 39
      "(": State 40
      heredoc: State 41
      vvexpression: State 14
      interpolation.string: State 43
      interpolation.heredoc: State 44
      "{": State 45
      "[": State 46
      "->": State 47
      HEREDOC: State 48
      IHEREDOC: State 49
      IDENTIFIER: State 42
      ISTRING_BEGIN: State 50
      IHEREDOC_BEGIN: State 51

  State 64:
    795/n1: conditional → "if" "(" • vexpression ")" block conditional.continue.maybe
      {}
    796/n1: vexpression →  • NUMBER
      {}
    797/n1: vexpression →  • ISTRING
      {}
    798/n1: vexpression →  • SSTRING
      {}
    799/n1: vexpression →  • KEYWORD
      {}
    800/n1: vexpression →  • REGEX
      {}
    801/n1: vexpression →  • interpolation
      {}
    802/l3: vexpression →  • "+" vexpression
      {}
    803/l3: vexpression →  • "-" vexpression
      {}
    804/n1: vexpression →  • object
      {}
    805/n1: vexpression →  • array
      {}
    806/n1: vexpression →  • function
      {}
    807/n1: vexpression →  • PREUNOP vexpression
      {}
    808/r5: vexpression →  • UNOP vexpression
      {}
    809/n1: vexpression →  • HEREDOC_REF
      {}
    810/n1: vexpression →  • IHEREDOC_REF
      {}
    811/n1: vexpression →  • "(" vexpression ")"
      {}
    812/n1: vexpression →  • heredoc
      {}
    813/n1: vexpression →  • vexpression "(" vexpression.parameters.maybe ")"
      {}
    814/l4: vexpression →  • vexpression ".." vexpression
      {}
    815/l4: vexpression →  • vexpression "..." vexpression
      {}
    816/l3: vexpression →  • vexpression BINOP vexpression
      {}
    817/l3: vexpression →  • vexpression "-" vexpression
      {}
    818/l3: vexpression →  • vexpression "+" vexpression
      {}
    819/r5: vexpression →  • vexpression UNOP
      {}
    820/n1: vexpression →  • vvexpression
      {}
    821/n1: interpolation →  • interpolation.string
      {}
    822/n1: interpolation →  • interpolation.heredoc
      {}
    823/n1: object →  • "{" "}"
      {}
    824/n1: array →  • "[" "]"
      {}
    825/n1: function →  • "->" function.arguments.maybe block
      {}
    826/n1: heredoc →  • HEREDOC
      {}
    827/n1: heredoc →  • IHEREDOC
      {}
    828/n1: vvexpression →  • vexpression "." IDENTIFIER
      {}
    829/n1: vvexpression →  • vexpression "[" vexpression "]"
      {}
    830/n1: vvexpression →  • IDENTIFIER
      {}
    831/n1: interpolation.string →  • ISTRING_BEGIN vexpression interpolation.string.finish
      {}
    832/n1: interpolation.heredoc →  • IHEREDOC_BEGIN vexpression interpolation.heredoc.finish
      {}
    transitions:
      vexpression: State 95
      NUMBER: State 25
      ISTRING: State 26
      SSTRING: State 27
      KEYWORD: State 28
      REGEX: State 29
      interpolation: State 30
      "+": State 31
      "-": State 32
      object: State 33
      array: State 34
      function: State 35
      PREUNOP: State 36
      UNOP: State 37
      HEREDOC_REF: State 38
      IHEREDOC_REF: State 39
      "(": State 40
      heredoc: State 41
      vvexpression: State 14
      interpolation.string: State 43
      interpolation.heredoc: State 44
      "{": State 45
      "[": State 46
      "->": State 47
      HEREDOC: State 48
      IHEREDOC: State 49
      IDENTIFIER: State 42
      ISTRING_BEGIN: State 50
      IHEREDOC_BEGIN: State 51

  State 65:
    833/n1: conditional → "unless" "(" • vexpression ")" block
      {}
    834/n1: vexpression →  • NUMBER
      {}
    835/n1: vexpression →  • ISTRING
      {}
    836/n1: vexpression →  • SSTRING
      {}
    837/n1: vexpression →  • KEYWORD
      {}
    838/n1: vexpression →  • REGEX
      {}
    839/n1: vexpression →  • interpolation
      {}
    840/l3: vexpression →  • "+" vexpression
      {}
    841/l3: vexpression →  • "-" vexpression
      {}
    842/n1: vexpression →  • object
      {}
    843/n1: vexpression →  • array
      {}
    844/n1: vexpression →  • function
      {}
    845/n1: vexpression →  • PREUNOP vexpression
      {}
    846/r5: vexpression →  • UNOP vexpression
      {}
    847/n1: vexpression →  • HEREDOC_REF
      {}
    848/n1: vexpression →  • IHEREDOC_REF
      {}
    849/n1: vexpression →  • "(" vexpression ")"
      {}
    850/n1: vexpression →  • heredoc
      {}
    851/n1: vexpression →  • vexpression "(" vexpression.parameters.maybe ")"
      {}
    852/l4: vexpression →  • vexpression ".." vexpression
      {}
    853/l4: vexpression →  • vexpression "..." vexpression
      {}
    854/l3: vexpression →  • vexpression BINOP vexpression
      {}
    855/l3: vexpression →  • vexpression "-" vexpression
      {}
    856/l3: vexpression →  • vexpression "+" vexpression
      {}
    857/r5: vexpression →  • vexpression UNOP
      {}
    858/n1: vexpression →  • vvexpression
      {}
    859/n1: interpolation →  • interpolation.string
      {}
    860/n1: interpolation →  • interpolation.heredoc
      {}
    861/n1: object →  • "{" "}"
      {}
    862/n1: array →  • "[" "]"
      {}
    863/n1: function →  • "->" function.arguments.maybe block
      {}
    864/n1: heredoc →  • HEREDOC
      {}
    865/n1: heredoc →  • IHEREDOC
      {}
    866/n1: vvexpression →  • vexpression "." IDENTIFIER
      {}
    867/n1: vvexpression →  • vexpression "[" vexpression "]"
      {}
    868/n1: vvexpression →  • IDENTIFIER
      {}
    869/n1: interpolation.string →  • ISTRING_BEGIN vexpression interpolation.string.finish
      {}
    870/n1: interpolation.heredoc →  • IHEREDOC_BEGIN vexpression interpolation.heredoc.finish
      {}
    transitions:
      vexpression: State 96
      NUMBER: State 25
      ISTRING: State 26
      SSTRING: State 27
      KEYWORD: State 28
      REGEX: State 29
      interpolation: State 30
      "+": State 31
      "-": State 32
      object: State 33
      array: State 34
      function: State 35
      PREUNOP: State 36
      UNOP: State 37
      HEREDOC_REF: State 38
      IHEREDOC_REF: State 39
      "(": State 40
      heredoc: State 41
      vvexpression: State 14
      interpolation.string: State 43
      interpolation.heredoc: State 44
      "{": State 45
      "[": State 46
      "->": State 47
      HEREDOC: State 48
      IHEREDOC: State 49
      IDENTIFIER: State 42
      ISTRING_BEGIN: State 50
      IHEREDOC_BEGIN: State 51

  State 66:
    871/n1: class → "class" IDENTIFIER • "{" class.definition.parts.maybe "}"
      {}
    transitions:
      "{": State 97

  State 67:
    872/n1: module → "module" IDENTIFIER • "{" module.definition.parts.maybe "}"
      {}
    transitions:
      "{": State 98

  State 68:
    873/n1: loop → "while" "(" • vexpression ")" block
      {}
    874/n1: vexpression →  • NUMBER
      {}
    875/n1: vexpression →  • ISTRING
      {}
    876/n1: vexpression →  • SSTRING
      {}
    877/n1: vexpression →  • KEYWORD
      {}
    878/n1: vexpression →  • REGEX
      {}
    879/n1: vexpression →  • interpolation
      {}
    880/l3: vexpression →  • "+" vexpression
      {}
    881/l3: vexpression →  • "-" vexpression
      {}
    882/n1: vexpression →  • object
      {}
    883/n1: vexpression →  • array
      {}
    884/n1: vexpression →  • function
      {}
    885/n1: vexpression →  • PREUNOP vexpression
      {}
    886/r5: vexpression →  • UNOP vexpression
      {}
    887/n1: vexpression →  • HEREDOC_REF
      {}
    888/n1: vexpression →  • IHEREDOC_REF
      {}
    889/n1: vexpression →  • "(" vexpression ")"
      {}
    890/n1: vexpression →  • heredoc
      {}
    891/n1: vexpression →  • vexpression "(" vexpression.parameters.maybe ")"
      {}
    892/l4: vexpression →  • vexpression ".." vexpression
      {}
    893/l4: vexpression →  • vexpression "..." vexpression
      {}
    894/l3: vexpression →  • vexpression BINOP vexpression
      {}
    895/l3: vexpression →  • vexpression "-" vexpression
      {}
    896/l3: vexpression →  • vexpression "+" vexpression
      {}
    897/r5: vexpression →  • vexpression UNOP
      {}
    898/n1: vexpression →  • vvexpression
      {}
    899/n1: interpolation →  • interpolation.string
      {}
    900/n1: interpolation →  • interpolation.heredoc
      {}
    901/n1: object →  • "{" "}"
      {}
    902/n1: array →  • "[" "]"
      {}
    903/n1: function →  • "->" function.arguments.maybe block
      {}
    904/n1: heredoc →  • HEREDOC
      {}
    905/n1: heredoc →  • IHEREDOC
      {}
    906/n1: vvexpression →  • vexpression "." IDENTIFIER
      {}
    907/n1: vvexpression →  • vexpression "[" vexpression "]"
      {}
    908/n1: vvexpression →  • IDENTIFIER
      {}
    909/n1: interpolation.string →  • ISTRING_BEGIN vexpression interpolation.string.finish
      {}
    910/n1: interpolation.heredoc →  • IHEREDOC_BEGIN vexpression interpolation.heredoc.finish
      {}
    transitions:
      vexpression: State 99
      NUMBER: State 25
      ISTRING: State 26
      SSTRING: State 27
      KEYWORD: State 28
      REGEX: State 29
      interpolation: State 30
      "+": State 31
      "-": State 32
      object: State 33
      array: State 34
      function: State 35
      PREUNOP: State 36
      UNOP: State 37
      HEREDOC_REF: State 38
      IHEREDOC_REF: State 39
      "(": State 40
      heredoc: State 41
      vvexpression: State 14
      interpolation.string: State 43
      interpolation.heredoc: State 44
      "{": State 45
      "[": State 46
      "->": State 47
      HEREDOC: State 48
      IHEREDOC: State 49
      IDENTIFIER: State 42
      ISTRING_BEGIN: State 50
      IHEREDOC_BEGIN: State 51

  State 69:
    911/n1: loop → "for" "(" • IDENTIFIER "in" vexpression ")" block
      {}
    912/n1: loop → "for" "(" • vexpression ")" block
      {}
    913/n1: vexpression →  • NUMBER
      {}
    914/n1: vexpression →  • ISTRING
      {}
    915/n1: vexpression →  • SSTRING
      {}
    916/n1: vexpression →  • KEYWORD
      {}
    917/n1: vexpression →  • REGEX
      {}
    918/n1: vexpression →  • interpolation
      {}
    919/l3: vexpression →  • "+" vexpression
      {}
    920/l3: vexpression →  • "-" vexpression
      {}
    921/n1: vexpression →  • object
      {}
    922/n1: vexpression →  • array
      {}
    923/n1: vexpression →  • function
      {}
    924/n1: vexpression →  • PREUNOP vexpression
      {}
    925/r5: vexpression →  • UNOP vexpression
      {}
    926/n1: vexpression →  • HEREDOC_REF
      {}
    927/n1: vexpression →  • IHEREDOC_REF
      {}
    928/n1: vexpression →  • "(" vexpression ")"
      {}
    929/n1: vexpression →  • heredoc
      {}
    930/n1: vexpression →  • vexpression "(" vexpression.parameters.maybe ")"
      {}
    931/l4: vexpression →  • vexpression ".." vexpression
      {}
    932/l4: vexpression →  • vexpression "..." vexpression
      {}
    933/l3: vexpression →  • vexpression BINOP vexpression
      {}
    934/l3: vexpression →  • vexpression "-" vexpression
      {}
    935/l3: vexpression →  • vexpression "+" vexpression
      {}
    936/r5: vexpression →  • vexpression UNOP
      {}
    937/n1: vexpression →  • vvexpression
      {}
    938/n1: interpolation →  • interpolation.string
      {}
    939/n1: interpolation →  • interpolation.heredoc
      {}
    940/n1: object →  • "{" "}"
      {}
    941/n1: array →  • "[" "]"
      {}
    942/n1: function →  • "->" function.arguments.maybe block
      {}
    943/n1: heredoc →  • HEREDOC
      {}
    944/n1: heredoc →  • IHEREDOC
      {}
    945/n1: vvexpression →  • vexpression "." IDENTIFIER
      {}
    946/n1: vvexpression →  • vexpression "[" vexpression "]"
      {}
    947/n1: vvexpression →  • IDENTIFIER
      {}
    948/n1: interpolation.string →  • ISTRING_BEGIN vexpression interpolation.string.finish
      {}
    949/n1: interpolation.heredoc →  • IHEREDOC_BEGIN vexpression interpolation.heredoc.finish
      {}
    transitions:
      IDENTIFIER: State 100
      vexpression: State 101
      NUMBER: State 25
      ISTRING: State 26
      SSTRING: State 27
      KEYWORD: State 28
      REGEX: State 29
      interpolation: State 30
      "+": State 31
      "-": State 32
      object: State 33
      array: State 34
      function: State 35
      PREUNOP: State 36
      UNOP: State 37
      HEREDOC_REF: State 38
      IHEREDOC_REF: State 39
      "(": State 40
      heredoc: State 41
      vvexpression: State 14
      interpolation.string: State 43
      interpolation.heredoc: State 44
      "{": State 45
      "[": State 46
      "->": State 47
      HEREDOC: State 48
      IHEREDOC: State 49
      ISTRING_BEGIN: State 50
      IHEREDOC_BEGIN: State 51

  State 70:
    950/n1: action → "return" vexpression •
      {$end, "if", "unless", "class", "module", "while", "for", "return", ACTION, "try", ":", NUMBER, ISTRING, SSTRING, KEYWORD, REGEX, ISTRING_BEGIN, IHEREDOC_BEGIN, "+", "-", "{", "[", "->", PREUNOP, UNOP, HEREDOC_REF, IHEREDOC_REF, "(", HEREDOC, IHEREDOC, "..", "...", BINOP, ".", IDENTIFIER, "\\n", "}", "]"}
    951/n1: vexpression → vexpression • "(" vexpression.parameters.maybe ")"
      {}
    952/l4: vexpression → vexpression • ".." vexpression
      {}
    953/l4: vexpression → vexpression • "..." vexpression
      {}
    954/l3: vexpression → vexpression • BINOP vexpression
      {}
    955/l3: vexpression → vexpression • "-" vexpression
      {}
    956/l3: vexpression → vexpression • "+" vexpression
      {}
    957/r5: vexpression → vexpression • UNOP
      {}
    958/n1: vvexpression → vexpression • "." IDENTIFIER
      {}
    959/n1: vvexpression → vexpression • "[" vexpression "]"
      {}
    transitions:
      "(": State 54
      "..": State 55
      "...": State 56
      BINOP: State 57
      "-": State 58
      "+": State 59
      UNOP: State 60
      ".": State 61
      "[": State 62
    reductions:
      $end: Rule 94
      "if": Rule 94
      "unless": Rule 94
      "class": Rule 94
      "module": Rule 94
      "while": Rule 94
      "for": Rule 94
      "return": Rule 94
      ACTION: Rule 94
      "try": Rule 94
      ":": Rule 94
      NUMBER: Rule 94
      ISTRING: Rule 94
      SSTRING: Rule 94
      KEYWORD: Rule 94
      REGEX: Rule 94
      ISTRING_BEGIN: Rule 94
      IHEREDOC_BEGIN: Rule 94
      "{": Rule 94
      "->": Rule 94
      PREUNOP: Rule 94
      HEREDOC_REF: Rule 94
      IHEREDOC_REF: Rule 94
      HEREDOC: Rule 94
      IHEREDOC: Rule 94
      IDENTIFIER: Rule 94
      "\\n": Rule 94
      "}": Rule 94
      "]": Rule 94
    conflicts:
      LPAREN: reduce 94/state 54 (n6 vs n1, resolved)
      RANGE: reduce 94/state 55 (l4 vs n1, resolved)
      ERANGE: reduce 94/state 56 (l4 vs n1, resolved)
      BINOP: reduce 94/state 57 (l3 vs n1, resolved)
      MINUS: reduce 94/state 58 (l3 vs n1, resolved)
      PLUS: reduce 94/state 59 (l3 vs n1, resolved)
      UNOP: reduce 94/state 60 (r5 vs n1, resolved)
      PROP: reduce 94/state 61 (r5 vs n1, resolved)
      LBRACK: reduce 94/state 62 (n6 vs n1, resolved)

  State 71:
    960/n1: exception → "try" "{" • expressions.maybe "}" exception.catch.maybe exception.finally.maybe
      {}
    961/n1: expressions.maybe →  • expressions
      {}
    962/n1: expressions.maybe →  •
      {"}"}
    963/n1: expressions →  • expressions expression
      {}
    964/n1: expressions →  • expression
      {}
    965/n1: expression →  • conditional
      {}
    966/n1: expression →  • class
      {}
    967/n1: expression →  • module
      {}
    968/n1: expression →  • loop
      {}
    969/n1: expression →  • action
      {}
    970/n1: expression →  • exception
      {}
    971/n1: expression →  • directive
      {}
    972/n1: expression →  • vexpression
      {}
    973/n1: expression →  • "\\n"
      {}
    974/r2: expression →  • vvexpression "=" vexpression
      {}
    975/n1: conditional →  • "if" "(" vexpression ")" block conditional.continue.maybe
      {}
    976/n1: conditional →  • "unless" "(" vexpression ")" block
      {}
    977/n1: class →  • "class" IDENTIFIER "{" class.definition.parts.maybe "}"
      {}
    978/n1: module →  • "module" IDENTIFIER "{" module.definition.parts.maybe "}"
      {}
    979/n1: loop →  • "while" "(" vexpression ")" block
      {}
    980/n1: loop →  • "for" "(" IDENTIFIER "in" vexpression ")" block
      {}
    981/n1: loop →  • "for" "(" vexpression ")" block
      {}
    982/n1: action →  • "return" vexpression
      {}
    983/n1: action →  • ACTION
      {}
    984/n1: exception →  • "try" "{" expressions.maybe "}" exception.catch.maybe exception.finally.maybe
      {}
    985/n1: directive →  • ":" "[" expressions "]"
      {}
    986/n1: vexpression →  • NUMBER
      {}
    987/n1: vexpression →  • ISTRING
      {}
    988/n1: vexpression →  • SSTRING
      {}
    989/n1: vexpression →  • KEYWORD
      {}
    990/n1: vexpression →  • REGEX
      {}
    991/n1: vexpression →  • interpolation
      {}
    992/l3: vexpression →  • "+" vexpression
      {}
    993/l3: vexpression →  • "-" vexpression
      {}
    994/n1: vexpression →  • object
      {}
    995/n1: vexpression →  • array
      {}
    996/n1: vexpression →  • function
      {}
    997/n1: vexpression →  • PREUNOP vexpression
      {}
    998/r5: vexpression →  • UNOP vexpression
      {}
    999/n1: vexpression →  • HEREDOC_REF
      {}
    1000/n1: vexpression →  • IHEREDOC_REF
      {}
    1001/n1: vexpression →  • "(" vexpression ")"
      {}
    1002/n1: vexpression →  • heredoc
      {}
    1003/n1: vexpression →  • vexpression "(" vexpression.parameters.maybe ")"
      {}
    1004/l4: vexpression →  • vexpression ".." vexpression
      {}
    1005/l4: vexpression →  • vexpression "..." vexpression
      {}
    1006/l3: vexpression →  • vexpression BINOP vexpression
      {}
    1007/l3: vexpression →  • vexpression "-" vexpression
      {}
    1008/l3: vexpression →  • vexpression "+" vexpression
      {}
    1009/r5: vexpression →  • vexpression UNOP
      {}
    1010/n1: vexpression →  • vvexpression
      {}
    1011/n1: vvexpression →  • vexpression "." IDENTIFIER
      {}
    1012/n1: vvexpression →  • vexpression "[" vexpression "]"
      {}
    1013/n1: vvexpression →  • IDENTIFIER
      {}
    1014/n1: interpolation →  • interpolation.string
      {}
    1015/n1: interpolation →  • interpolation.heredoc
      {}
    1016/n1: object →  • "{" "}"
      {}
    1017/n1: array →  • "[" "]"
      {}
    1018/n1: function →  • "->" function.arguments.maybe block
      {}
    1019/n1: heredoc →  • HEREDOC
      {}
    1020/n1: heredoc →  • IHEREDOC
      {}
    1021/n1: interpolation.string →  • ISTRING_BEGIN vexpression interpolation.string.finish
      {}
    1022/n1: interpolation.heredoc →  • IHEREDOC_BEGIN vexpression interpolation.heredoc.finish
      {}
    transitions:
      expressions.maybe: State 102
      expressions: State 3
      expression: State 4
      conditional: State 5
      class: State 6
      module: State 7
      loop: State 8
      action: State 9
      exception: State 10
      directive: State 11
      vexpression: State 12
      "\\n": State 13
      vvexpression: State 14
      "if": State 15
      "unless": State 16
      "class": State 17
      "module": State 18
      "while": State 19
      "for": State 20
      "return": State 21
      ACTION: State 22
      "try": State 23
      ":": State 24
      NUMBER: State 25
      ISTRING: State 26
      SSTRING: State 27
      KEYWORD: State 28
      REGEX: State 29
      interpolation: State 30
      "+": State 31
      "-": State 32
      object: State 33
      array: State 34
      function: State 35
      PREUNOP: State 36
      UNOP: State 37
      HEREDOC_REF: State 38
      IHEREDOC_REF: State 39
      "(": State 40
      heredoc: State 41
      IDENTIFIER: State 42
      interpolation.string: State 43
      interpolation.heredoc: State 44
      "{": State 45
      "[": State 46
      "->": State 47
      HEREDOC: State 48
      IHEREDOC: State 49
      ISTRING_BEGIN: State 50
      IHEREDOC_BEGIN: State 51
    reductions:
      "}": Rule 3

  State 72:
    1023/n1: directive → ":" "[" • expressions "]"
      {}
    1024/n1: expressions →  • expressions expression
      {}
    1025/n1: expressions →  • expression
      {}
    1026/n1: expression →  • conditional
      {}
    1027/n1: expression →  • class
      {}
    1028/n1: expression →  • module
      {}
    1029/n1: expression →  • loop
      {}
    1030/n1: expression →  • action
      {}
    1031/n1: expression →  • exception
      {}
    1032/n1: expression →  • directive
      {}
    1033/n1: expression →  • vexpression
      {}
    1034/n1: expression →  • "\\n"
      {}
    1035/r2: expression →  • vvexpression "=" vexpression
      {}
    1036/n1: conditional →  • "if" "(" vexpression ")" block conditional.continue.maybe
      {}
    1037/n1: conditional →  • "unless" "(" vexpression ")" block
      {}
    1038/n1: class →  • "class" IDENTIFIER "{" class.definition.parts.maybe "}"
      {}
    1039/n1: module →  • "module" IDENTIFIER "{" module.definition.parts.maybe "}"
      {}
    1040/n1: loop →  • "while" "(" vexpression ")" block
      {}
    1041/n1: loop →  • "for" "(" IDENTIFIER "in" vexpression ")" block
      {}
    1042/n1: loop →  • "for" "(" vexpression ")" block
      {}
    1043/n1: action →  • "return" vexpression
      {}
    1044/n1: action →  • ACTION
      {}
    1045/n1: exception →  • "try" "{" expressions.maybe "}" exception.catch.maybe exception.finally.maybe
      {}
    1046/n1: directive →  • ":" "[" expressions "]"
      {}
    1047/n1: vexpression →  • NUMBER
      {}
    1048/n1: vexpression →  • ISTRING
      {}
    1049/n1: vexpression →  • SSTRING
      {}
    1050/n1: vexpression →  • KEYWORD
      {}
    1051/n1: vexpression →  • REGEX
      {}
    1052/n1: vexpression →  • interpolation
      {}
    1053/l3: vexpression →  • "+" vexpression
      {}
    1054/l3: vexpression →  • "-" vexpression
      {}
    1055/n1: vexpression →  • object
      {}
    1056/n1: vexpression →  • array
      {}
    1057/n1: vexpression →  • function
      {}
    1058/n1: vexpression →  • PREUNOP vexpression
      {}
    1059/r5: vexpression →  • UNOP vexpression
      {}
    1060/n1: vexpression →  • HEREDOC_REF
      {}
    1061/n1: vexpression →  • IHEREDOC_REF
      {}
    1062/n1: vexpression →  • "(" vexpression ")"
      {}
    1063/n1: vexpression →  • heredoc
      {}
    1064/n1: vexpression →  • vexpression "(" vexpression.parameters.maybe ")"
      {}
    1065/l4: vexpression →  • vexpression ".." vexpression
      {}
    1066/l4: vexpression →  • vexpression "..." vexpression
      {}
    1067/l3: vexpression →  • vexpression BINOP vexpression
      {}
    1068/l3: vexpression →  • vexpression "-" vexpression
      {}
    1069/l3: vexpression →  • vexpression "+" vexpression
      {}
    1070/r5: vexpression →  • vexpression UNOP
      {}
    1071/n1: vexpression →  • vvexpression
      {}
    1072/n1: vvexpression →  • vexpression "." IDENTIFIER
      {}
    1073/n1: vvexpression →  • vexpression "[" vexpression "]"
      {}
    1074/n1: vvexpression →  • IDENTIFIER
      {}
    1075/n1: interpolation →  • interpolation.string
      {}
    1076/n1: interpolation →  • interpolation.heredoc
      {}
    1077/n1: object →  • "{" "}"
      {}
    1078/n1: array →  • "[" "]"
      {}
    1079/n1: function →  • "->" function.arguments.maybe block
      {}
    1080/n1: heredoc →  • HEREDOC
      {}
    1081/n1: heredoc →  • IHEREDOC
      {}
    1082/n1: interpolation.string →  • ISTRING_BEGIN vexpression interpolation.string.finish
      {}
    1083/n1: interpolation.heredoc →  • IHEREDOC_BEGIN vexpression interpolation.heredoc.finish
      {}
    transitions:
      expressions: State 103
      expression: State 4
      conditional: State 5
      class: State 6
      module: State 7
      loop: State 8
      action: State 9
      exception: State 10
      directive: State 11
      vexpression: State 12
      "\\n": State 13
      vvexpression: State 14
      "if": State 15
      "unless": State 16
      "class": State 17
      "module": State 18
      "while": State 19
      "for": State 20
      "return": State 21
      ACTION: State 22
      "try": State 23
      ":": State 24
      NUMBER: State 25
      ISTRING: State 26
      SSTRING: State 27
      KEYWORD: State 28
      REGEX: State 29
      interpolation: State 30
      "+": State 31
      "-": State 32
      object: State 33
      array: State 34
      function: State 35
      PREUNOP: State 36
      UNOP: State 37
      HEREDOC_REF: State 38
      IHEREDOC_REF: State 39
      "(": State 40
      heredoc: State 41
      IDENTIFIER: State 42
      interpolation.string: State 43
      interpolation.heredoc: State 44
      "{": State 45
      "[": State 46
      "->": State 47
      HEREDOC: State 48
      IHEREDOC: State 49
      ISTRING_BEGIN: State 50
      IHEREDOC_BEGIN: State 51

  State 73:
    1084/l3: vexpression → "+" vexpression •
      {$end, "if", "unless", "class", "module", "while", "for", "return", ACTION, "try", ":", NUMBER, ISTRING, SSTRING, KEYWORD, REGEX, ISTRING_BEGIN, IHEREDOC_BEGIN, "+", "-", "{", "[", "->", PREUNOP, UNOP, HEREDOC_REF, IHEREDOC_REF, "(", HEREDOC, IHEREDOC, "..", "...", BINOP, ".", IDENTIFIER, "\\n", "}", "]", ")", ","}
    1085/n1: vexpression → vexpression • "(" vexpression.parameters.maybe ")"
      {}
    1086/l4: vexpression → vexpression • ".." vexpression
      {}
    1087/l4: vexpression → vexpression • "..." vexpression
      {}
    1088/l3: vexpression → vexpression • BINOP vexpression
      {}
    1089/l3: vexpression → vexpression • "-" vexpression
      {}
    1090/l3: vexpression → vexpression • "+" vexpression
      {}
    1091/r5: vexpression → vexpression • UNOP
      {}
    1092/n1: vvexpression → vexpression • "." IDENTIFIER
      {}
    1093/n1: vvexpression → vexpression • "[" vexpression "]"
      {}
    transitions:
      "(": State 54
      "..": State 55
      "...": State 56
      UNOP: State 60
      ".": State 61
      "[": State 62
    reductions:
      BINOP: Rule 25
      "-": Rule 25
      "+": Rule 25
      $end: Rule 25
      "if": Rule 25
      "unless": Rule 25
      "class": Rule 25
      "module": Rule 25
      "while": Rule 25
      "for": Rule 25
      "return": Rule 25
      ACTION: Rule 25
      "try": Rule 25
      ":": Rule 25
      NUMBER: Rule 25
      ISTRING: Rule 25
      SSTRING: Rule 25
      KEYWORD: Rule 25
      REGEX: Rule 25
      ISTRING_BEGIN: Rule 25
      IHEREDOC_BEGIN: Rule 25
      "{": Rule 25
      "->": Rule 25
      PREUNOP: Rule 25
      HEREDOC_REF: Rule 25
      IHEREDOC_REF: Rule 25
      HEREDOC: Rule 25
      IHEREDOC: Rule 25
      IDENTIFIER: Rule 25
      "\\n": Rule 25
      "}": Rule 25
      "]": Rule 25
      ")": Rule 25
      ",": Rule 25
    conflicts:
      LPAREN: reduce 25/state 54 (n6 vs l3, resolved)
      RANGE: reduce 25/state 55 (l4 vs l3, resolved)
      ERANGE: reduce 25/state 56 (l4 vs l3, resolved)
      BINOP: reduce 25/state 57 (l3 vs l3, resolved)
      MINUS: reduce 25/state 58 (l3 vs l3, resolved)
      PLUS: reduce 25/state 59 (l3 vs l3, resolved)
      UNOP: reduce 25/state 60 (r5 vs l3, resolved)
      PROP: reduce 25/state 61 (r5 vs l3, resolved)
      LBRACK: reduce 25/state 62 (n6 vs l3, resolved)

  State 74:
    1094/l3: vexpression → "-" vexpression •
      {$end, "if", "unless", "class", "module", "while", "for", "return", ACTION, "try", ":", NUMBER, ISTRING, SSTRING, KEYWORD, REGEX, ISTRING_BEGIN, IHEREDOC_BEGIN, "+", "-", "{", "[", "->", PREUNOP, UNOP, HEREDOC_REF, IHEREDOC_REF, "(", HEREDOC, IHEREDOC, "..", "...", BINOP, ".", IDENTIFIER, "\\n", "}", "]", ")", ","}
    1095/n1: vexpression → vexpression • "(" vexpression.parameters.maybe ")"
      {}
    1096/l4: vexpression → vexpression • ".." vexpression
      {}
    1097/l4: vexpression → vexpression • "..." vexpression
      {}
    1098/l3: vexpression → vexpression • BINOP vexpression
      {}
    1099/l3: vexpression → vexpression • "-" vexpression
      {}
    1100/l3: vexpression → vexpression • "+" vexpression
      {}
    1101/r5: vexpression → vexpression • UNOP
      {}
    1102/n1: vvexpression → vexpression • "." IDENTIFIER
      {}
    1103/n1: vvexpression → vexpression • "[" vexpression "]"
      {}
    transitions:
      "(": State 54
      "..": State 55
      "...": State 56
      UNOP: State 60
      ".": State 61
      "[": State 62
    reductions:
      BINOP: Rule 26
      "-": Rule 26
      "+": Rule 26
      $end: Rule 26
      "if": Rule 26
      "unless": Rule 26
      "class": Rule 26
      "module": Rule 26
      "while": Rule 26
      "for": Rule 26
      "return": Rule 26
      ACTION: Rule 26
      "try": Rule 26
      ":": Rule 26
      NUMBER: Rule 26
      ISTRING: Rule 26
      SSTRING: Rule 26
      KEYWORD: Rule 26
      REGEX: Rule 26
      ISTRING_BEGIN: Rule 26
      IHEREDOC_BEGIN: Rule 26
      "{": Rule 26
      "->": Rule 26
      PREUNOP: Rule 26
      HEREDOC_REF: Rule 26
      IHEREDOC_REF: Rule 26
      HEREDOC: Rule 26
      IHEREDOC: Rule 26
      IDENTIFIER: Rule 26
      "\\n": Rule 26
      "}": Rule 26
      "]": Rule 26
      ")": Rule 26
      ",": Rule 26
    conflicts:
      LPAREN: reduce 26/state 54 (n6 vs l3, resolved)
      RANGE: reduce 26/state 55 (l4 vs l3, resolved)
      ERANGE: reduce 26/state 56 (l4 vs l3, resolved)
      BINOP: reduce 26/state 57 (l3 vs l3, resolved)
      MINUS: reduce 26/state 58 (l3 vs l3, resolved)
      PLUS: reduce 26/state 59 (l3 vs l3, resolved)
      UNOP: reduce 26/state 60 (r5 vs l3, resolved)
      PROP: reduce 26/state 61 (r5 vs l3, resolved)
      LBRACK: reduce 26/state 62 (n6 vs l3, resolved)

  State 75:
    1104/n1: vexpression → PREUNOP vexpression •
      {$end, "if", "unless", "class", "module", "while", "for", "return", ACTION, "try", ":", NUMBER, ISTRING, SSTRING, KEYWORD, REGEX, ISTRING_BEGIN, IHEREDOC_BEGIN, "+", "-", "{", "[", "->", PREUNOP, UNOP, HEREDOC_REF, IHEREDOC_REF, "(", HEREDOC, IHEREDOC, "..", "...", BINOP, ".", IDENTIFIER, "\\n", "}", "]", ")", ","}
    1105/n1: vexpression → vexpression • "(" vexpression.parameters.maybe ")"
      {}
    1106/l4: vexpression → vexpression • ".." vexpression
      {}
    1107/l4: vexpression → vexpression • "..." vexpression
      {}
    1108/l3: vexpression → vexpression • BINOP vexpression
      {}
    1109/l3: vexpression → vexpression • "-" vexpression
      {}
    1110/l3: vexpression → vexpression • "+" vexpression
      {}
    1111/r5: vexpression → vexpression • UNOP
      {}
    1112/n1: vvexpression → vexpression • "." IDENTIFIER
      {}
    1113/n1: vvexpression → vexpression • "[" vexpression "]"
      {}
    transitions:
      "(": State 54
      "..": State 55
      "...": State 56
      BINOP: State 57
      "-": State 58
      "+": State 59
      UNOP: State 60
      ".": State 61
      "[": State 62
    reductions:
      $end: Rule 30
      "if": Rule 30
      "unless": Rule 30
      "class": Rule 30
      "module": Rule 30
      "while": Rule 30
      "for": Rule 30
      "return": Rule 30
      ACTION: Rule 30
      "try": Rule 30
      ":": Rule 30
      NUMBER: Rule 30
      ISTRING: Rule 30
      SSTRING: Rule 30
      KEYWORD: Rule 30
      REGEX: Rule 30
      ISTRING_BEGIN: Rule 30
      IHEREDOC_BEGIN: Rule 30
      "{": Rule 30
      "->": Rule 30
      PREUNOP: Rule 30
      HEREDOC_REF: Rule 30
      IHEREDOC_REF: Rule 30
      HEREDOC: Rule 30
      IHEREDOC: Rule 30
      IDENTIFIER: Rule 30
      "\\n": Rule 30
      "}": Rule 30
      "]": Rule 30
      ")": Rule 30
      ",": Rule 30
    conflicts:
      LPAREN: reduce 30/state 54 (n6 vs n1, resolved)
      RANGE: reduce 30/state 55 (l4 vs n1, resolved)
      ERANGE: reduce 30/state 56 (l4 vs n1, resolved)
      BINOP: reduce 30/state 57 (l3 vs n1, resolved)
      MINUS: reduce 30/state 58 (l3 vs n1, resolved)
      PLUS: reduce 30/state 59 (l3 vs n1, resolved)
      UNOP: reduce 30/state 60 (r5 vs n1, resolved)
      PROP: reduce 30/state 61 (r5 vs n1, resolved)
      LBRACK: reduce 30/state 62 (n6 vs n1, resolved)

  State 76:
    1114/r5: vexpression → UNOP vexpression •
      {$end, "if", "unless", "class", "module", "while", "for", "return", ACTION, "try", ":", NUMBER, ISTRING, SSTRING, KEYWORD, REGEX, ISTRING_BEGIN, IHEREDOC_BEGIN, "+", "-", "{", "[", "->", PREUNOP, UNOP, HEREDOC_REF, IHEREDOC_REF, "(", HEREDOC, IHEREDOC, "..", "...", BINOP, ".", IDENTIFIER, "\\n", "}", "]", ")", ","}
    1115/n1: vexpression → vexpression • "(" vexpression.parameters.maybe ")"
      {}
    1116/l4: vexpression → vexpression • ".." vexpression
      {}
    1117/l4: vexpression → vexpression • "..." vexpression
      {}
    1118/l3: vexpression → vexpression • BINOP vexpression
      {}
    1119/l3: vexpression → vexpression • "-" vexpression
      {}
    1120/l3: vexpression → vexpression • "+" vexpression
      {}
    1121/r5: vexpression → vexpression • UNOP
      {}
    1122/n1: vvexpression → vexpression • "." IDENTIFIER
      {}
    1123/n1: vvexpression → vexpression • "[" vexpression "]"
      {}
    transitions:
      "(": State 54
      UNOP: State 60
      ".": State 61
      "[": State 62
    reductions:
      "..": Rule 31
      "...": Rule 31
      BINOP: Rule 31
      "-": Rule 31
      "+": Rule 31
      $end: Rule 31
      "if": Rule 31
      "unless": Rule 31
      "class": Rule 31
      "module": Rule 31
      "while": Rule 31
      "for": Rule 31
      "return": Rule 31
      ACTION: Rule 31
      "try": Rule 31
      ":": Rule 31
      NUMBER: Rule 31
      ISTRING: Rule 31
      SSTRING: Rule 31
      KEYWORD: Rule 31
      REGEX: Rule 31
      ISTRING_BEGIN: Rule 31
      IHEREDOC_BEGIN: Rule 31
      "{": Rule 31
      "->": Rule 31
      PREUNOP: Rule 31
      HEREDOC_REF: Rule 31
      IHEREDOC_REF: Rule 31
      HEREDOC: Rule 31
      IHEREDOC: Rule 31
      IDENTIFIER: Rule 31
      "\\n": Rule 31
      "}": Rule 31
      "]": Rule 31
      ")": Rule 31
      ",": Rule 31
    conflicts:
      LPAREN: reduce 31/state 54 (n6 vs r5, resolved)
      RANGE: reduce 31/state 55 (l4 vs r5, resolved)
      ERANGE: reduce 31/state 56 (l4 vs r5, resolved)
      BINOP: reduce 31/state 57 (l3 vs r5, resolved)
      MINUS: reduce 31/state 58 (l3 vs r5, resolved)
      PLUS: reduce 31/state 59 (l3 vs r5, resolved)
      UNOP: reduce 31/state 60 (r5 vs r5, resolved)
      PROP: reduce 31/state 61 (r5 vs r5, resolved)
      LBRACK: reduce 31/state 62 (n6 vs r5, resolved)

  State 77:
    1124/n1: vexpression → "(" vexpression • ")"
      {}
    1125/n1: vexpression → vexpression • "(" vexpression.parameters.maybe ")"
      {}
    1126/l4: vexpression → vexpression • ".." vexpression
      {}
    1127/l4: vexpression → vexpression • "..." vexpression
      {}
    1128/l3: vexpression → vexpression • BINOP vexpression
      {}
    1129/l3: vexpression → vexpression • "-" vexpression
      {}
    1130/l3: vexpression → vexpression • "+" vexpression
      {}
    1131/r5: vexpression → vexpression • UNOP
      {}
    1132/n1: vvexpression → vexpression • "." IDENTIFIER
      {}
    1133/n1: vvexpression → vexpression • "[" vexpression "]"
      {}
    transitions:
      ")": State 104
      "(": State 54
      "..": State 55
      "...": State 56
      BINOP: State 57
      "-": State 58
      "+": State 59
      UNOP: State 60
      ".": State 61
      "[": State 62

  State 78:
    1134/n1: object → "{" "}" •
      {$end, "if", "unless", "class", "module", "while", "for", "return", ACTION, "try", ":", NUMBER, ISTRING, SSTRING, KEYWORD, REGEX, ISTRING_BEGIN, IHEREDOC_BEGIN, "+", "-", "{", "[", "->", PREUNOP, UNOP, HEREDOC_REF, IHEREDOC_REF, "(", HEREDOC, IHEREDOC, "..", "...", BINOP, ".", IDENTIFIER, "\\n", "}", "]", ")", ","}
    reductions:
      $default: Rule 51

  State 79:
    1135/n1: array → "[" "]" •
      {$end, "if", "unless", "class", "module", "while", "for", "return", ACTION, "try", ":", NUMBER, ISTRING, SSTRING, KEYWORD, REGEX, ISTRING_BEGIN, IHEREDOC_BEGIN, "+", "-", "{", "[", "->", PREUNOP, UNOP, HEREDOC_REF, IHEREDOC_REF, "(", HEREDOC, IHEREDOC, "..", "...", BINOP, ".", IDENTIFIER, "\\n", "}", "]", ")", ","}
    reductions:
      $default: Rule 52

  State 80:
    1136/n1: function → "->" function.arguments.maybe • block
      {}
    1137/n1: block →  • "{" expressions.maybe "}"
      {}
    transitions:
      block: State 105
      "{": State 106

  State 81:
    1138/n1: function.arguments.maybe → "(" • function.arguments.body.maybe ")"
      {}
    1139/n1: function.arguments.body.maybe →  • function.arguments.body
      {}
    1140/n1: function.arguments.body.maybe →  •
      {")"}
    1141/n1: function.arguments.body →  • function.arguments.body "," IDENTIFIER
      {}
    1142/n1: function.arguments.body →  • IDENTIFIER
      {}
    transitions:
      function.arguments.body.maybe: State 107
      function.arguments.body: State 108
      IDENTIFIER: State 109
    reductions:
      ")": Rule 59

  State 82:
    1143/n1: interpolation.string → ISTRING_BEGIN vexpression • interpolation.string.finish
      {}
    1144/n1: vexpression → vexpression • "(" vexpression.parameters.maybe ")"
      {}
    1145/l4: vexpression → vexpression • ".." vexpression
      {}
    1146/l4: vexpression → vexpression • "..." vexpression
      {}
    1147/l3: vexpression → vexpression • BINOP vexpression
      {}
    1148/l3: vexpression → vexpression • "-" vexpression
      {}
    1149/l3: vexpression → vexpression • "+" vexpression
      {}
    1150/r5: vexpression → vexpression • UNOP
      {}
    1151/n1: vvexpression → vexpression • "." IDENTIFIER
      {}
    1152/n1: vvexpression → vexpression • "[" vexpression "]"
      {}
    1153/n1: interpolation.string.finish →  • interpolation.string
      {}
    1154/n1: interpolation.string.finish →  • ISTRING
      {}
    1155/n1: interpolation.string →  • ISTRING_BEGIN vexpression interpolation.string.finish
      {}
    transitions:
      interpolation.string.finish: State 110
      "(": State 54
      "..": State 55
      "...": State 56
      BINOP: State 57
      "-": State 58
      "+": State 59
      UNOP: State 60
      ".": State 61
      "[": State 62
      interpolation.string: State 111
      ISTRING: State 112
      ISTRING_BEGIN: State 50

  State 83:
    1156/n1: interpolation.heredoc → IHEREDOC_BEGIN vexpression • interpolation.heredoc.finish
      {}
    1157/n1: vexpression → vexpression • "(" vexpression.parameters.maybe ")"
      {}
    1158/l4: vexpression → vexpression • ".." vexpression
      {}
    1159/l4: vexpression → vexpression • "..." vexpression
      {}
    1160/l3: vexpression → vexpression • BINOP vexpression
      {}
    1161/l3: vexpression → vexpression • "-" vexpression
      {}
    1162/l3: vexpression → vexpression • "+" vexpression
      {}
    1163/r5: vexpression → vexpression • UNOP
      {}
    1164/n1: vvexpression → vexpression • "." IDENTIFIER
      {}
    1165/n1: vvexpression → vexpression • "[" vexpression "]"
      {}
    1166/n1: interpolation.heredoc.finish →  • interpolation.heredoc
      {}
    1167/n1: interpolation.heredoc.finish →  • IHEREDOC
      {}
    1168/n1: interpolation.heredoc →  • IHEREDOC_BEGIN vexpression interpolation.heredoc.finish
      {}
    transitions:
      interpolation.heredoc.finish: State 113
      "(": State 54
      "..": State 55
      "...": State 56
      BINOP: State 57
      "-": State 58
      "+": State 59
      UNOP: State 60
      ".": State 61
      "[": State 62
      interpolation.heredoc: State 114
      IHEREDOC: State 115
      IHEREDOC_BEGIN: State 51

  State 84:
    1169/n1: vexpression → vexpression "(" vexpression.parameters.maybe • ")"
      {}
    transitions:
      ")": State 116

  State 85:
    1170/n1: vexpression.parameters.maybe → vexpression.parameters •
      {")"}
    1171/n1: vexpression.parameters → vexpression.parameters • "," vexpression
      {}
    transitions:
      ",": State 117
    reductions:
      ")": Rule 47

  State 86:
    1172/n1: vexpression.parameters → vexpression •
      {")", ","}
    1173/n1: vexpression → vexpression • "(" vexpression.parameters.maybe ")"
      {}
    1174/l4: vexpression → vexpression • ".." vexpression
      {}
    1175/l4: vexpression → vexpression • "..." vexpression
      {}
    1176/l3: vexpression → vexpression • BINOP vexpression
      {}
    1177/l3: vexpression → vexpression • "-" vexpression
      {}
    1178/l3: vexpression → vexpression • "+" vexpression
      {}
    1179/r5: vexpression → vexpression • UNOP
      {}
    1180/n1: vvexpression → vexpression • "." IDENTIFIER
      {}
    1181/n1: vvexpression → vexpression • "[" vexpression "]"
      {}
    transitions:
      "(": State 54
      "..": State 55
      "...": State 56
      BINOP: State 57
      "-": State 58
      "+": State 59
      UNOP: State 60
      ".": State 61
      "[": State 62
    reductions:
      ")": Rule 50
      ",": Rule 50

  State 87:
    1182/l4: vexpression → vexpression ".." vexpression •
      {$end, "if", "unless", "class", "module", "while", "for", "return", ACTION, "try", ":", NUMBER, ISTRING, SSTRING, KEYWORD, REGEX, ISTRING_BEGIN, IHEREDOC_BEGIN, "+", "-", "{", "[", "->", PREUNOP, UNOP, HEREDOC_REF, IHEREDOC_REF, "(", HEREDOC, IHEREDOC, "..", "...", BINOP, ".", IDENTIFIER, "\\n", "}", "]", ")", ","}
    1183/n1: vexpression → vexpression • "(" vexpression.parameters.maybe ")"
      {}
    1184/l4: vexpression → vexpression • ".." vexpression
      {}
    1185/l4: vexpression → vexpression • "..." vexpression
      {}
    1186/l3: vexpression → vexpression • BINOP vexpression
      {}
    1187/l3: vexpression → vexpression • "-" vexpression
      {}
    1188/l3: vexpression → vexpression • "+" vexpression
      {}
    1189/r5: vexpression → vexpression • UNOP
      {}
    1190/n1: vvexpression → vexpression • "." IDENTIFIER
      {}
    1191/n1: vvexpression → vexpression • "[" vexpression "]"
      {}
    transitions:
      "(": State 54
      UNOP: State 60
      ".": State 61
      "[": State 62
    reductions:
      "..": Rule 37
      "...": Rule 37
      BINOP: Rule 37
      "-": Rule 37
      "+": Rule 37
      $end: Rule 37
      "if": Rule 37
      "unless": Rule 37
      "class": Rule 37
      "module": Rule 37
      "while": Rule 37
      "for": Rule 37
      "return": Rule 37
      ACTION: Rule 37
      "try": Rule 37
      ":": Rule 37
      NUMBER: Rule 37
      ISTRING: Rule 37
      SSTRING: Rule 37
      KEYWORD: Rule 37
      REGEX: Rule 37
      ISTRING_BEGIN: Rule 37
      IHEREDOC_BEGIN: Rule 37
      "{": Rule 37
      "->": Rule 37
      PREUNOP: Rule 37
      HEREDOC_REF: Rule 37
      IHEREDOC_REF: Rule 37
      HEREDOC: Rule 37
      IHEREDOC: Rule 37
      IDENTIFIER: Rule 37
      "\\n": Rule 37
      "}": Rule 37
      "]": Rule 37
      ")": Rule 37
      ",": Rule 37
    conflicts:
      LPAREN: reduce 37/state 54 (n6 vs l4, resolved)
      RANGE: reduce 37/state 55 (l4 vs l4, resolved)
      ERANGE: reduce 37/state 56 (l4 vs l4, resolved)
      BINOP: reduce 37/state 57 (l3 vs l4, resolved)
      MINUS: reduce 37/state 58 (l3 vs l4, resolved)
      PLUS: reduce 37/state 59 (l3 vs l4, resolved)
      UNOP: reduce 37/state 60 (r5 vs l4, resolved)
      PROP: reduce 37/state 61 (r5 vs l4, resolved)
      LBRACK: reduce 37/state 62 (n6 vs l4, resolved)

  State 88:
    1192/l4: vexpression → vexpression "..." vexpression •
      {$end, "if", "unless", "class", "module", "while", "for", "return", ACTION, "try", ":", NUMBER, ISTRING, SSTRING, KEYWORD, REGEX, ISTRING_BEGIN, IHEREDOC_BEGIN, "+", "-", "{", "[", "->", PREUNOP, UNOP, HEREDOC_REF, IHEREDOC_REF, "(", HEREDOC, IHEREDOC, "..", "...", BINOP, ".", IDENTIFIER, "\\n", "}", "]", ")", ","}
    1193/n1: vexpression → vexpression • "(" vexpression.parameters.maybe ")"
      {}
    1194/l4: vexpression → vexpression • ".." vexpression
      {}
    1195/l4: vexpression → vexpression • "..." vexpression
      {}
    1196/l3: vexpression → vexpression • BINOP vexpression
      {}
    1197/l3: vexpression → vexpression • "-" vexpression
      {}
    1198/l3: vexpression → vexpression • "+" vexpression
      {}
    1199/r5: vexpression → vexpression • UNOP
      {}
    1200/n1: vvexpression → vexpression • "." IDENTIFIER
      {}
    1201/n1: vvexpression → vexpression • "[" vexpression "]"
      {}
    transitions:
      "(": State 54
      UNOP: State 60
      ".": State 61
      "[": State 62
    reductions:
      "..": Rule 38
      "...": Rule 38
      BINOP: Rule 38
      "-": Rule 38
      "+": Rule 38
      $end: Rule 38
      "if": Rule 38
      "unless": Rule 38
      "class": Rule 38
      "module": Rule 38
      "while": Rule 38
      "for": Rule 38
      "return": Rule 38
      ACTION: Rule 38
      "try": Rule 38
      ":": Rule 38
      NUMBER: Rule 38
      ISTRING: Rule 38
      SSTRING: Rule 38
      KEYWORD: Rule 38
      REGEX: Rule 38
      ISTRING_BEGIN: Rule 38
      IHEREDOC_BEGIN: Rule 38
      "{": Rule 38
      "->": Rule 38
      PREUNOP: Rule 38
      HEREDOC_REF: Rule 38
      IHEREDOC_REF: Rule 38
      HEREDOC: Rule 38
      IHEREDOC: Rule 38
      IDENTIFIER: Rule 38
      "\\n": Rule 38
      "}": Rule 38
      "]": Rule 38
      ")": Rule 38
      ",": Rule 38
    conflicts:
      LPAREN: reduce 38/state 54 (n6 vs l4, resolved)
      RANGE: reduce 38/state 55 (l4 vs l4, resolved)
      ERANGE: reduce 38/state 56 (l4 vs l4, resolved)
      BINOP: reduce 38/state 57 (l3 vs l4, resolved)
      MINUS: reduce 38/state 58 (l3 vs l4, resolved)
      PLUS: reduce 38/state 59 (l3 vs l4, resolved)
      UNOP: reduce 38/state 60 (r5 vs l4, resolved)
      PROP: reduce 38/state 61 (r5 vs l4, resolved)
      LBRACK: reduce 38/state 62 (n6 vs l4, resolved)

  State 89:
    1202/l3: vexpression → vexpression BINOP vexpression •
      {$end, "if", "unless", "class", "module", "while", "for", "return", ACTION, "try", ":", NUMBER, ISTRING, SSTRING, KEYWORD, REGEX, ISTRING_BEGIN, IHEREDOC_BEGIN, "+", "-", "{", "[", "->", PREUNOP, UNOP, HEREDOC_REF, IHEREDOC_REF, "(", HEREDOC, IHEREDOC, "..", "...", BINOP, ".", IDENTIFIER, "\\n", "}", "]", ")", ","}
    1203/n1: vexpression → vexpression • "(" vexpression.parameters.maybe ")"
      {}
    1204/l4: vexpression → vexpression • ".." vexpression
      {}
    1205/l4: vexpression → vexpression • "..." vexpression
      {}
    1206/l3: vexpression → vexpression • BINOP vexpression
      {}
    1207/l3: vexpression → vexpression • "-" vexpression
      {}
    1208/l3: vexpression → vexpression • "+" vexpression
      {}
    1209/r5: vexpression → vexpression • UNOP
      {}
    1210/n1: vvexpression → vexpression • "." IDENTIFIER
      {}
    1211/n1: vvexpression → vexpression • "[" vexpression "]"
      {}
    transitions:
      "(": State 54
      "..": State 55
      "...": State 56
      UNOP: State 60
      ".": State 61
      "[": State 62
    reductions:
      BINOP: Rule 39
      "-": Rule 39
      "+": Rule 39
      $end: Rule 39
      "if": Rule 39
      "unless": Rule 39
      "class": Rule 39
      "module": Rule 39
      "while": Rule 39
      "for": Rule 39
      "return": Rule 39
      ACTION: Rule 39
      "try": Rule 39
      ":": Rule 39
      NUMBER: Rule 39
      ISTRING: Rule 39
      SSTRING: Rule 39
      KEYWORD: Rule 39
      REGEX: Rule 39
      ISTRING_BEGIN: Rule 39
      IHEREDOC_BEGIN: Rule 39
      "{": Rule 39
      "->": Rule 39
      PREUNOP: Rule 39
      HEREDOC_REF: Rule 39
      IHEREDOC_REF: Rule 39
      HEREDOC: Rule 39
      IHEREDOC: Rule 39
      IDENTIFIER: Rule 39
      "\\n": Rule 39
      "}": Rule 39
      "]": Rule 39
      ")": Rule 39
      ",": Rule 39
    conflicts:
      LPAREN: reduce 39/state 54 (n6 vs l3, resolved)
      RANGE: reduce 39/state 55 (l4 vs l3, resolved)
      ERANGE: reduce 39/state 56 (l4 vs l3, resolved)
      BINOP: reduce 39/state 57 (l3 vs l3, resolved)
      MINUS: reduce 39/state 58 (l3 vs l3, resolved)
      PLUS: reduce 39/state 59 (l3 vs l3, resolved)
      UNOP: reduce 39/state 60 (r5 vs l3, resolved)
      PROP: reduce 39/state 61 (r5 vs l3, resolved)
      LBRACK: reduce 39/state 62 (n6 vs l3, resolved)

  State 90:
    1212/l3: vexpression → vexpression "-" vexpression •
      {$end, "if", "unless", "class", "module", "while", "for", "return", ACTION, "try", ":", NUMBER, ISTRING, SSTRING, KEYWORD, REGEX, ISTRING_BEGIN, IHEREDOC_BEGIN, "+", "-", "{", "[", "->", PREUNOP, UNOP, HEREDOC_REF, IHEREDOC_REF, "(", HEREDOC, IHEREDOC, "..", "...", BINOP, ".", IDENTIFIER, "\\n", "}", "]", ")", ","}
    1213/n1: vexpression → vexpression • "(" vexpression.parameters.maybe ")"
      {}
    1214/l4: vexpression → vexpression • ".." vexpression
      {}
    1215/l4: vexpression → vexpression • "..." vexpression
      {}
    1216/l3: vexpression → vexpression • BINOP vexpression
      {}
    1217/l3: vexpression → vexpression • "-" vexpression
      {}
    1218/l3: vexpression → vexpression • "+" vexpression
      {}
    1219/r5: vexpression → vexpression • UNOP
      {}
    1220/n1: vvexpression → vexpression • "." IDENTIFIER
      {}
    1221/n1: vvexpression → vexpression • "[" vexpression "]"
      {}
    transitions:
      "(": State 54
      "..": State 55
      "...": State 56
      UNOP: State 60
      ".": State 61
      "[": State 62
    reductions:
      BINOP: Rule 40
      "-": Rule 40
      "+": Rule 40
      $end: Rule 40
      "if": Rule 40
      "unless": Rule 40
      "class": Rule 40
      "module": Rule 40
      "while": Rule 40
      "for": Rule 40
      "return": Rule 40
      ACTION: Rule 40
      "try": Rule 40
      ":": Rule 40
      NUMBER: Rule 40
      ISTRING: Rule 40
      SSTRING: Rule 40
      KEYWORD: Rule 40
      REGEX: Rule 40
      ISTRING_BEGIN: Rule 40
      IHEREDOC_BEGIN: Rule 40
      "{": Rule 40
      "->": Rule 40
      PREUNOP: Rule 40
      HEREDOC_REF: Rule 40
      IHEREDOC_REF: Rule 40
      HEREDOC: Rule 40
      IHEREDOC: Rule 40
      IDENTIFIER: Rule 40
      "\\n": Rule 40
      "}": Rule 40
      "]": Rule 40
      ")": Rule 40
      ",": Rule 40
    conflicts:
      LPAREN: reduce 40/state 54 (n6 vs l3, resolved)
      RANGE: reduce 40/state 55 (l4 vs l3, resolved)
      ERANGE: reduce 40/state 56 (l4 vs l3, resolved)
      BINOP: reduce 40/state 57 (l3 vs l3, resolved)
      MINUS: reduce 40/state 58 (l3 vs l3, resolved)
      PLUS: reduce 40/state 59 (l3 vs l3, resolved)
      UNOP: reduce 40/state 60 (r5 vs l3, resolved)
      PROP: reduce 40/state 61 (r5 vs l3, resolved)
      LBRACK: reduce 40/state 62 (n6 vs l3, resolved)

  State 91:
    1222/l3: vexpression → vexpression "+" vexpression •
      {$end, "if", "unless", "class", "module", "while", "for", "return", ACTION, "try", ":", NUMBER, ISTRING, SSTRING, KEYWORD, REGEX, ISTRING_BEGIN, IHEREDOC_BEGIN, "+", "-", "{", "[", "->", PREUNOP, UNOP, HEREDOC_REF, IHEREDOC_REF, "(", HEREDOC, IHEREDOC, "..", "...", BINOP, ".", IDENTIFIER, "\\n", "}", "]", ")", ","}
    1223/n1: vexpression → vexpression • "(" vexpression.parameters.maybe ")"
      {}
    1224/l4: vexpression → vexpression • ".." vexpression
      {}
    1225/l4: vexpression → vexpression • "..." vexpression
      {}
    1226/l3: vexpression → vexpression • BINOP vexpression
      {}
    1227/l3: vexpression → vexpression • "-" vexpression
      {}
    1228/l3: vexpression → vexpression • "+" vexpression
      {}
    1229/r5: vexpression → vexpression • UNOP
      {}
    1230/n1: vvexpression → vexpression • "." IDENTIFIER
      {}
    1231/n1: vvexpression → vexpression • "[" vexpression "]"
      {}
    transitions:
      "(": State 54
      "..": State 55
      "...": State 56
      UNOP: State 60
      ".": State 61
      "[": State 62
    reductions:
      BINOP: Rule 41
      "-": Rule 41
      "+": Rule 41
      $end: Rule 41
      "if": Rule 41
      "unless": Rule 41
      "class": Rule 41
      "module": Rule 41
      "while": Rule 41
      "for": Rule 41
      "return": Rule 41
      ACTION: Rule 41
      "try": Rule 41
      ":": Rule 41
      NUMBER: Rule 41
      ISTRING: Rule 41
      SSTRING: Rule 41
      KEYWORD: Rule 41
      REGEX: Rule 41
      ISTRING_BEGIN: Rule 41
      IHEREDOC_BEGIN: Rule 41
      "{": Rule 41
      "->": Rule 41
      PREUNOP: Rule 41
      HEREDOC_REF: Rule 41
      IHEREDOC_REF: Rule 41
      HEREDOC: Rule 41
      IHEREDOC: Rule 41
      IDENTIFIER: Rule 41
      "\\n": Rule 41
      "}": Rule 41
      "]": Rule 41
      ")": Rule 41
      ",": Rule 41
    conflicts:
      LPAREN: reduce 41/state 54 (n6 vs l3, resolved)
      RANGE: reduce 41/state 55 (l4 vs l3, resolved)
      ERANGE: reduce 41/state 56 (l4 vs l3, resolved)
      BINOP: reduce 41/state 57 (l3 vs l3, resolved)
      MINUS: reduce 41/state 58 (l3 vs l3, resolved)
      PLUS: reduce 41/state 59 (l3 vs l3, resolved)
      UNOP: reduce 41/state 60 (r5 vs l3, resolved)
      PROP: reduce 41/state 61 (r5 vs l3, resolved)
      LBRACK: reduce 41/state 62 (n6 vs l3, resolved)

  State 92:
    1232/n1: vvexpression → vexpression "." IDENTIFIER •
      {"=", $end, "if", "unless", "class", "module", "while", "for", "return", ACTION, "try", ":", NUMBER, ISTRING, SSTRING, KEYWORD, REGEX, ISTRING_BEGIN, IHEREDOC_BEGIN, "+", "-", "{", "[", "->", PREUNOP, UNOP, HEREDOC_REF, IHEREDOC_REF, "(", HEREDOC, IHEREDOC, "..", "...", BINOP, ".", IDENTIFIER, "\\n", "}", "]", ")", ","}
    reductions:
      $default: Rule 44

  State 93:
    1233/n1: vvexpression → vexpression "[" vexpression • "]"
      {}
    1234/n1: vexpression → vexpression • "(" vexpression.parameters.maybe ")"
      {}
    1235/l4: vexpression → vexpression • ".." vexpression
      {}
    1236/l4: vexpression → vexpression • "..." vexpression
      {}
    1237/l3: vexpression → vexpression • BINOP vexpression
      {}
    1238/l3: vexpression → vexpression • "-" vexpression
      {}
    1239/l3: vexpression → vexpression • "+" vexpression
      {}
    1240/r5: vexpression → vexpression • UNOP
      {}
    1241/n1: vvexpression → vexpression • "." IDENTIFIER
      {}
    1242/n1: vvexpression → vexpression • "[" vexpression "]"
      {}
    transitions:
      "]": State 118
      "(": State 54
      "..": State 55
      "...": State 56
      BINOP: State 57
      "-": State 58
      "+": State 59
      UNOP: State 60
      ".": State 61
      "[": State 62

  State 94:
    1243/r2: expression → vvexpression "=" vexpression •
      {$end, "if", "unless", "class", "module", "while", "for", "return", ACTION, "try", ":", NUMBER, ISTRING, SSTRING, KEYWORD, REGEX, ISTRING_BEGIN, IHEREDOC_BEGIN, "+", "-", "{", "[", "->", PREUNOP, UNOP, HEREDOC_REF, IHEREDOC_REF, "(", HEREDOC, IHEREDOC, "..", "...", BINOP, ".", IDENTIFIER, "\\n", "}", "]"}
    1244/n1: vexpression → vexpression • "(" vexpression.parameters.maybe ")"
      {}
    1245/l4: vexpression → vexpression • ".." vexpression
      {}
    1246/l4: vexpression → vexpression • "..." vexpression
      {}
    1247/l3: vexpression → vexpression • BINOP vexpression
      {}
    1248/l3: vexpression → vexpression • "-" vexpression
      {}
    1249/l3: vexpression → vexpression • "+" vexpression
      {}
    1250/r5: vexpression → vexpression • UNOP
      {}
    1251/n1: vvexpression → vexpression • "." IDENTIFIER
      {}
    1252/n1: vvexpression → vexpression • "[" vexpression "]"
      {}
    transitions:
      "(": State 54
      "..": State 55
      "...": State 56
      BINOP: State 57
      "-": State 58
      "+": State 59
      UNOP: State 60
      ".": State 61
      "[": State 62
    reductions:
      $end: Rule 18
      "if": Rule 18
      "unless": Rule 18
      "class": Rule 18
      "module": Rule 18
      "while": Rule 18
      "for": Rule 18
      "return": Rule 18
      ACTION: Rule 18
      "try": Rule 18
      ":": Rule 18
      NUMBER: Rule 18
      ISTRING: Rule 18
      SSTRING: Rule 18
      KEYWORD: Rule 18
      REGEX: Rule 18
      ISTRING_BEGIN: Rule 18
      IHEREDOC_BEGIN: Rule 18
      "{": Rule 18
      "->": Rule 18
      PREUNOP: Rule 18
      HEREDOC_REF: Rule 18
      IHEREDOC_REF: Rule 18
      HEREDOC: Rule 18
      IHEREDOC: Rule 18
      IDENTIFIER: Rule 18
      "\\n": Rule 18
      "}": Rule 18
      "]": Rule 18
    conflicts:
      LPAREN: reduce 18/state 54 (n6 vs r2, resolved)
      RANGE: reduce 18/state 55 (l4 vs r2, resolved)
      ERANGE: reduce 18/state 56 (l4 vs r2, resolved)
      BINOP: reduce 18/state 57 (l3 vs r2, resolved)
      MINUS: reduce 18/state 58 (l3 vs r2, resolved)
      PLUS: reduce 18/state 59 (l3 vs r2, resolved)
      UNOP: reduce 18/state 60 (r5 vs r2, resolved)
      PROP: reduce 18/state 61 (r5 vs r2, resolved)
      LBRACK: reduce 18/state 62 (n6 vs r2, resolved)

  State 95:
    1253/n1: conditional → "if" "(" vexpression • ")" block conditional.continue.maybe
      {}
    1254/n1: vexpression → vexpression • "(" vexpression.parameters.maybe ")"
      {}
    1255/l4: vexpression → vexpression • ".." vexpression
      {}
    1256/l4: vexpression → vexpression • "..." vexpression
      {}
    1257/l3: vexpression → vexpression • BINOP vexpression
      {}
    1258/l3: vexpression → vexpression • "-" vexpression
      {}
    1259/l3: vexpression → vexpression • "+" vexpression
      {}
    1260/r5: vexpression → vexpression • UNOP
      {}
    1261/n1: vvexpression → vexpression • "." IDENTIFIER
      {}
    1262/n1: vvexpression → vexpression • "[" vexpression "]"
      {}
    transitions:
      ")": State 119
      "(": State 54
      "..": State 55
      "...": State 56
      BINOP: State 57
      "-": State 58
      "+": State 59
      UNOP: State 60
      ".": State 61
      "[": State 62

  State 96:
    1263/n1: conditional → "unless" "(" vexpression • ")" block
      {}
    1264/n1: vexpression → vexpression • "(" vexpression.parameters.maybe ")"
      {}
    1265/l4: vexpression → vexpression • ".." vexpression
      {}
    1266/l4: vexpression → vexpression • "..." vexpression
      {}
    1267/l3: vexpression → vexpression • BINOP vexpression
      {}
    1268/l3: vexpression → vexpression • "-" vexpression
      {}
    1269/l3: vexpression → vexpression • "+" vexpression
      {}
    1270/r5: vexpression → vexpression • UNOP
      {}
    1271/n1: vvexpression → vexpression • "." IDENTIFIER
      {}
    1272/n1: vvexpression → vexpression • "[" vexpression "]"
      {}
    transitions:
      ")": State 120
      "(": State 54
      "..": State 55
      "...": State 56
      BINOP: State 57
      "-": State 58
      "+": State 59
      UNOP: State 60
      ".": State 61
      "[": State 62

  State 97:
    1273/n1: class → "class" IDENTIFIER "{" • class.definition.parts.maybe "}"
      {}
    1274/n1: class.definition.parts.maybe →  • class.definition.parts
      {}
    1275/n1: class.definition.parts.maybe →  •
      {"}"}
    1276/n1: class.definition.parts →  • class.definition.parts class.definition.part
      {}
    1277/n1: class.definition.parts →  • class.definition.part
      {}
    1278/n1: class.definition.part →  • IDENTIFIER ":" vexpression
      {}
    1279/n1: class.definition.part →  • IDENTIFIER "." IDENTIFIER ":" vexpression
      {}
    1280/n1: class.definition.part →  • module
      {}
    1281/n1: class.definition.part →  • class
      {}
    1282/n1: module →  • "module" IDENTIFIER "{" module.definition.parts.maybe "}"
      {}
    1283/n1: class →  • "class" IDENTIFIER "{" class.definition.parts.maybe "}"
      {}
    transitions:
      class.definition.parts.maybe: State 121
      class.definition.parts: State 122
      class.definition.part: State 123
      IDENTIFIER: State 124
      module: State 125
      class: State 126
      "module": State 18
      "class": State 17
    reductions:
      "}": Rule 79

  State 98:
    1284/n1: module → "module" IDENTIFIER "{" • module.definition.parts.maybe "}"
      {}
    1285/n1: module.definition.parts.maybe →  • module.definition.parts
      {}
    1286/n1: module.definition.parts.maybe →  •
      {"}"}
    1287/n1: module.definition.parts →  • module.definition.parts module.definition.part
      {}
    1288/n1: module.definition.parts →  • module.definition.part
      {}
    1289/n1: module.definition.part →  • IDENTIFIER ":" vexpression
      {}
    transitions:
      module.definition.parts.maybe: State 127
      module.definition.parts: State 128
      module.definition.part: State 129
      IDENTIFIER: State 130
    reductions:
      "}": Rule 87

  State 99:
    1290/n1: loop → "while" "(" vexpression • ")" block
      {}
    1291/n1: vexpression → vexpression • "(" vexpression.parameters.maybe ")"
      {}
    1292/l4: vexpression → vexpression • ".." vexpression
      {}
    1293/l4: vexpression → vexpression • "..." vexpression
      {}
    1294/l3: vexpression → vexpression • BINOP vexpression
      {}
    1295/l3: vexpression → vexpression • "-" vexpression
      {}
    1296/l3: vexpression → vexpression • "+" vexpression
      {}
    1297/r5: vexpression → vexpression • UNOP
      {}
    1298/n1: vvexpression → vexpression • "." IDENTIFIER
      {}
    1299/n1: vvexpression → vexpression • "[" vexpression "]"
      {}
    transitions:
      ")": State 131
      "(": State 54
      "..": State 55
      "...": State 56
      BINOP: State 57
      "-": State 58
      "+": State 59
      UNOP: State 60
      ".": State 61
      "[": State 62

  State 100:
    1300/n1: loop → "for" "(" IDENTIFIER • "in" vexpression ")" block
      {}
    1301/n1: vvexpression → IDENTIFIER •
      {")", "(", "..", "...", BINOP, "-", "+", UNOP, ".", "["}
    transitions:
      "in": State 132
    reductions:
      ")": Rule 46
      "(": Rule 46
      "..": Rule 46
      "...": Rule 46
      BINOP: Rule 46
      "-": Rule 46
      "+": Rule 46
      UNOP: Rule 46
      ".": Rule 46
      "[": Rule 46

  State 101:
    1302/n1: loop → "for" "(" vexpression • ")" block
      {}
    1303/n1: vexpression → vexpression • "(" vexpression.parameters.maybe ")"
      {}
    1304/l4: vexpression → vexpression • ".." vexpression
      {}
    1305/l4: vexpression → vexpression • "..." vexpression
      {}
    1306/l3: vexpression → vexpression • BINOP vexpression
      {}
    1307/l3: vexpression → vexpression • "-" vexpression
      {}
    1308/l3: vexpression → vexpression • "+" vexpression
      {}
    1309/r5: vexpression → vexpression • UNOP
      {}
    1310/n1: vvexpression → vexpression • "." IDENTIFIER
      {}
    1311/n1: vvexpression → vexpression • "[" vexpression "]"
      {}
    transitions:
      ")": State 133
      "(": State 54
      "..": State 55
      "...": State 56
      BINOP: State 57
      "-": State 58
      "+": State 59
      UNOP: State 60
      ".": State 61
      "[": State 62

  State 102:
    1312/n1: exception → "try" "{" expressions.maybe • "}" exception.catch.maybe exception.finally.maybe
      {}
    transitions:
      "}": State 134

  State 103:
    1313/n1: directive → ":" "[" expressions • "]"
      {}
    1314/n1: expressions → expressions • expression
      {}
    1315/n1: expression →  • conditional
      {}
    1316/n1: expression →  • class
      {}
    1317/n1: expression →  • module
      {}
    1318/n1: expression →  • loop
      {}
    1319/n1: expression →  • action
      {}
    1320/n1: expression →  • exception
      {}
    1321/n1: expression →  • directive
      {}
    1322/n1: expression →  • vexpression
      {}
    1323/n1: expression →  • "\\n"
      {}
    1324/r2: expression →  • vvexpression "=" vexpression
      {}
    1325/n1: conditional →  • "if" "(" vexpression ")" block conditional.continue.maybe
      {}
    1326/n1: conditional →  • "unless" "(" vexpression ")" block
      {}
    1327/n1: class →  • "class" IDENTIFIER "{" class.definition.parts.maybe "}"
      {}
    1328/n1: module →  • "module" IDENTIFIER "{" module.definition.parts.maybe "}"
      {}
    1329/n1: loop →  • "while" "(" vexpression ")" block
      {}
    1330/n1: loop →  • "for" "(" IDENTIFIER "in" vexpression ")" block
      {}
    1331/n1: loop →  • "for" "(" vexpression ")" block
      {}
    1332/n1: action →  • "return" vexpression
      {}
    1333/n1: action →  • ACTION
      {}
    1334/n1: exception →  • "try" "{" expressions.maybe "}" exception.catch.maybe exception.finally.maybe
      {}
    1335/n1: directive →  • ":" "[" expressions "]"
      {}
    1336/n1: vexpression →  • NUMBER
      {}
    1337/n1: vexpression →  • ISTRING
      {}
    1338/n1: vexpression →  • SSTRING
      {}
    1339/n1: vexpression →  • KEYWORD
      {}
    1340/n1: vexpression →  • REGEX
      {}
    1341/n1: vexpression →  • interpolation
      {}
    1342/l3: vexpression →  • "+" vexpression
      {}
    1343/l3: vexpression →  • "-" vexpression
      {}
    1344/n1: vexpression →  • object
      {}
    1345/n1: vexpression →  • array
      {}
    1346/n1: vexpression →  • function
      {}
    1347/n1: vexpression →  • PREUNOP vexpression
      {}
    1348/r5: vexpression →  • UNOP vexpression
      {}
    1349/n1: vexpression →  • HEREDOC_REF
      {}
    1350/n1: vexpression →  • IHEREDOC_REF
      {}
    1351/n1: vexpression →  • "(" vexpression ")"
      {}
    1352/n1: vexpression →  • heredoc
      {}
    1353/n1: vexpression →  • vexpression "(" vexpression.parameters.maybe ")"
      {}
    1354/l4: vexpression →  • vexpression ".." vexpression
      {}
    1355/l4: vexpression →  • vexpression "..." vexpression
      {}
    1356/l3: vexpression →  • vexpression BINOP vexpression
      {}
    1357/l3: vexpression →  • vexpression "-" vexpression
      {}
    1358/l3: vexpression →  • vexpression "+" vexpression
      {}
    1359/r5: vexpression →  • vexpression UNOP
      {}
    1360/n1: vexpression →  • vvexpression
      {}
    1361/n1: vvexpression →  • vexpression "." IDENTIFIER
      {}
    1362/n1: vvexpression →  • vexpression "[" vexpression "]"
      {}
    1363/n1: vvexpression →  • IDENTIFIER
      {}
    1364/n1: interpolation →  • interpolation.string
      {}
    1365/n1: interpolation →  • interpolation.heredoc
      {}
    1366/n1: object →  • "{" "}"
      {}
    1367/n1: array →  • "[" "]"
      {}
    1368/n1: function →  • "->" function.arguments.maybe block
      {}
    1369/n1: heredoc →  • HEREDOC
      {}
    1370/n1: heredoc →  • IHEREDOC
      {}
    1371/n1: interpolation.string →  • ISTRING_BEGIN vexpression interpolation.string.finish
      {}
    1372/n1: interpolation.heredoc →  • IHEREDOC_BEGIN vexpression interpolation.heredoc.finish
      {}
    transitions:
      "]": State 135
      expression: State 53
      conditional: State 5
      class: State 6
      module: State 7
      loop: State 8
      action: State 9
      exception: State 10
      directive: State 11
      vexpression: State 12
      "\\n": State 13
      vvexpression: State 14
      "if": State 15
      "unless": State 16
      "class": State 17
      "module": State 18
      "while": State 19
      "for": State 20
      "return": State 21
      ACTION: State 22
      "try": State 23
      ":": State 24
      NUMBER: State 25
      ISTRING: State 26
      SSTRING: State 27
      KEYWORD: State 28
      REGEX: State 29
      interpolation: State 30
      "+": State 31
      "-": State 32
      object: State 33
      array: State 34
      function: State 35
      PREUNOP: State 36
      UNOP: State 37
      HEREDOC_REF: State 38
      IHEREDOC_REF: State 39
      "(": State 40
      heredoc: State 41
      IDENTIFIER: State 42
      interpolation.string: State 43
      interpolation.heredoc: State 44
      "{": State 45
      "[": State 46
      "->": State 47
      HEREDOC: State 48
      IHEREDOC: State 49
      ISTRING_BEGIN: State 50
      IHEREDOC_BEGIN: State 51

  State 104:
    1373/n1: vexpression → "(" vexpression ")" •
      {$end, "if", "unless", "class", "module", "while", "for", "return", ACTION, "try", ":", NUMBER, ISTRING, SSTRING, KEYWORD, REGEX, ISTRING_BEGIN, IHEREDOC_BEGIN, "+", "-", "{", "[", "->", PREUNOP, UNOP, HEREDOC_REF, IHEREDOC_REF, "(", HEREDOC, IHEREDOC, "..", "...", BINOP, ".", IDENTIFIER, "\\n", "}", "]", ")", ","}
    reductions:
      $default: Rule 34

  State 105:
    1374/n1: function → "->" function.arguments.maybe block •
      {$end, "if", "unless", "class", "module", "while", "for", "return", ACTION, "try", ":", NUMBER, ISTRING, SSTRING, KEYWORD, REGEX, ISTRING_BEGIN, IHEREDOC_BEGIN, "+", "-", "{", "[", "->", PREUNOP, UNOP, HEREDOC_REF, IHEREDOC_REF, "(", HEREDOC, IHEREDOC, "..", "...", BINOP, ".", IDENTIFIER, "\\n", "}", "]", ")", ","}
    reductions:
      $default: Rule 53

  State 106:
    1375/n1: block → "{" • expressions.maybe "}"
      {}
    1376/n1: expressions.maybe →  • expressions
      {}
    1377/n1: expressions.maybe →  •
      {"}"}
    1378/n1: expressions →  • expressions expression
      {}
    1379/n1: expressions →  • expression
      {}
    1380/n1: expression →  • conditional
      {}
    1381/n1: expression →  • class
      {}
    1382/n1: expression →  • module
      {}
    1383/n1: expression →  • loop
      {}
    1384/n1: expression →  • action
      {}
    1385/n1: expression →  • exception
      {}
    1386/n1: expression →  • directive
      {}
    1387/n1: expression →  • vexpression
      {}
    1388/n1: expression →  • "\\n"
      {}
    1389/r2: expression →  • vvexpression "=" vexpression
      {}
    1390/n1: conditional →  • "if" "(" vexpression ")" block conditional.continue.maybe
      {}
    1391/n1: conditional →  • "unless" "(" vexpression ")" block
      {}
    1392/n1: class →  • "class" IDENTIFIER "{" class.definition.parts.maybe "}"
      {}
    1393/n1: module →  • "module" IDENTIFIER "{" module.definition.parts.maybe "}"
      {}
    1394/n1: loop →  • "while" "(" vexpression ")" block
      {}
    1395/n1: loop →  • "for" "(" IDENTIFIER "in" vexpression ")" block
      {}
    1396/n1: loop →  • "for" "(" vexpression ")" block
      {}
    1397/n1: action →  • "return" vexpression
      {}
    1398/n1: action →  • ACTION
      {}
    1399/n1: exception →  • "try" "{" expressions.maybe "}" exception.catch.maybe exception.finally.maybe
      {}
    1400/n1: directive →  • ":" "[" expressions "]"
      {}
    1401/n1: vexpression →  • NUMBER
      {}
    1402/n1: vexpression →  • ISTRING
      {}
    1403/n1: vexpression →  • SSTRING
      {}
    1404/n1: vexpression →  • KEYWORD
      {}
    1405/n1: vexpression →  • REGEX
      {}
    1406/n1: vexpression →  • interpolation
      {}
    1407/l3: vexpression →  • "+" vexpression
      {}
    1408/l3: vexpression →  • "-" vexpression
      {}
    1409/n1: vexpression →  • object
      {}
    1410/n1: vexpression →  • array
      {}
    1411/n1: vexpression →  • function
      {}
    1412/n1: vexpression →  • PREUNOP vexpression
      {}
    1413/r5: vexpression →  • UNOP vexpression
      {}
    1414/n1: vexpression →  • HEREDOC_REF
      {}
    1415/n1: vexpression →  • IHEREDOC_REF
      {}
    1416/n1: vexpression →  • "(" vexpression ")"
      {}
    1417/n1: vexpression →  • heredoc
      {}
    1418/n1: vexpression →  • vexpression "(" vexpression.parameters.maybe ")"
      {}
    1419/l4: vexpression →  • vexpression ".." vexpression
      {}
    1420/l4: vexpression →  • vexpression "..." vexpression
      {}
    1421/l3: vexpression →  • vexpression BINOP vexpression
      {}
    1422/l3: vexpression →  • vexpression "-" vexpression
      {}
    1423/l3: vexpression →  • vexpression "+" vexpression
      {}
    1424/r5: vexpression →  • vexpression UNOP
      {}
    1425/n1: vexpression →  • vvexpression
      {}
    1426/n1: vvexpression →  • vexpression "." IDENTIFIER
      {}
    1427/n1: vvexpression →  • vexpression "[" vexpression "]"
      {}
    1428/n1: vvexpression →  • IDENTIFIER
      {}
    1429/n1: interpolation →  • interpolation.string
      {}
    1430/n1: interpolation →  • interpolation.heredoc
      {}
    1431/n1: object →  • "{" "}"
      {}
    1432/n1: array →  • "[" "]"
      {}
    1433/n1: function →  • "->" function.arguments.maybe block
      {}
    1434/n1: heredoc →  • HEREDOC
      {}
    1435/n1: heredoc →  • IHEREDOC
      {}
    1436/n1: interpolation.string →  • ISTRING_BEGIN vexpression interpolation.string.finish
      {}
    1437/n1: interpolation.heredoc →  • IHEREDOC_BEGIN vexpression interpolation.heredoc.finish
      {}
    transitions:
      expressions.maybe: State 136
      expressions: State 3
      expression: State 4
      conditional: State 5
      class: State 6
      module: State 7
      loop: State 8
      action: State 9
      exception: State 10
      directive: State 11
      vexpression: State 12
      "\\n": State 13
      vvexpression: State 14
      "if": State 15
      "unless": State 16
      "class": State 17
      "module": State 18
      "while": State 19
      "for": State 20
      "return": State 21
      ACTION: State 22
      "try": State 23
      ":": State 24
      NUMBER: State 25
      ISTRING: State 26
      SSTRING: State 27
      KEYWORD: State 28
      REGEX: State 29
      interpolation: State 30
      "+": State 31
      "-": State 32
      object: State 33
      array: State 34
      function: State 35
      PREUNOP: State 36
      UNOP: State 37
      HEREDOC_REF: State 38
      IHEREDOC_REF: State 39
      "(": State 40
      heredoc: State 41
      IDENTIFIER: State 42
      interpolation.string: State 43
      interpolation.heredoc: State 44
      "{": State 45
      "[": State 46
      "->": State 47
      HEREDOC: State 48
      IHEREDOC: State 49
      ISTRING_BEGIN: State 50
      IHEREDOC_BEGIN: State 51
    reductions:
      "}": Rule 3

  State 107:
    1438/n1: function.arguments.maybe → "(" function.arguments.body.maybe • ")"
      {}
    transitions:
      ")": State 137

  State 108:
    1439/n1: function.arguments.body.maybe → function.arguments.body •
      {")"}
    1440/n1: function.arguments.body → function.arguments.body • "," IDENTIFIER
      {}
    transitions:
      ",": State 138
    reductions:
      ")": Rule 58

  State 109:
    1441/n1: function.arguments.body → IDENTIFIER •
      {")", ","}
    reductions:
      ")": Rule 61
      ",": Rule 61

  State 110:
    1442/n1: interpolation.string → ISTRING_BEGIN vexpression interpolation.string.finish •
      {$end, "if", "unless", "class", "module", "while", "for", "return", ACTION, "try", ":", NUMBER, ISTRING, SSTRING, KEYWORD, REGEX, ISTRING_BEGIN, IHEREDOC_BEGIN, "+", "-", "{", "[", "->", PREUNOP, UNOP, HEREDOC_REF, IHEREDOC_REF, "(", HEREDOC, IHEREDOC, "..", "...", BINOP, ".", IDENTIFIER, "\\n", "}", "]", ")", ","}
    reductions:
      $default: Rule 67

  State 111:
    1443/n1: interpolation.string.finish → interpolation.string •
      {$end, "if", "unless", "class", "module", "while", "for", "return", ACTION, "try", ":", NUMBER, ISTRING, SSTRING, KEYWORD, REGEX, ISTRING_BEGIN, IHEREDOC_BEGIN, "+", "-", "{", "[", "->", PREUNOP, UNOP, HEREDOC_REF, IHEREDOC_REF, "(", HEREDOC, IHEREDOC, "..", "...", BINOP, ".", IDENTIFIER, "\\n", "}", "]", ")", ","}
    reductions:
      $default: Rule 68

  State 112:
    1444/n1: interpolation.string.finish → ISTRING •
      {$end, "if", "unless", "class", "module", "while", "for", "return", ACTION, "try", ":", NUMBER, ISTRING, SSTRING, KEYWORD, REGEX, ISTRING_BEGIN, IHEREDOC_BEGIN, "+", "-", "{", "[", "->", PREUNOP, UNOP, HEREDOC_REF, IHEREDOC_REF, "(", HEREDOC, IHEREDOC, "..", "...", BINOP, ".", IDENTIFIER, "\\n", "}", "]", ")", ","}
    reductions:
      $default: Rule 69

  State 113:
    1445/n1: interpolation.heredoc → IHEREDOC_BEGIN vexpression interpolation.heredoc.finish •
      {$end, "if", "unless", "class", "module", "while", "for", "return", ACTION, "try", ":", NUMBER, ISTRING, SSTRING, KEYWORD, REGEX, ISTRING_BEGIN, IHEREDOC_BEGIN, "+", "-", "{", "[", "->", PREUNOP, UNOP, HEREDOC_REF, IHEREDOC_REF, "(", HEREDOC, IHEREDOC, "..", "...", BINOP, ".", IDENTIFIER, "\\n", "}", "]", ")", ","}
    reductions:
      $default: Rule 64

  State 114:
    1446/n1: interpolation.heredoc.finish → interpolation.heredoc •
      {$end, "if", "unless", "class", "module", "while", "for", "return", ACTION, "try", ":", NUMBER, ISTRING, SSTRING, KEYWORD, REGEX, ISTRING_BEGIN, IHEREDOC_BEGIN, "+", "-", "{", "[", "->", PREUNOP, UNOP, HEREDOC_REF, IHEREDOC_REF, "(", HEREDOC, IHEREDOC, "..", "...", BINOP, ".", IDENTIFIER, "\\n", "}", "]", ")", ","}
    reductions:
      $default: Rule 65

  State 115:
    1447/n1: interpolation.heredoc.finish → IHEREDOC •
      {$end, "if", "unless", "class", "module", "while", "for", "return", ACTION, "try", ":", NUMBER, ISTRING, SSTRING, KEYWORD, REGEX, ISTRING_BEGIN, IHEREDOC_BEGIN, "+", "-", "{", "[", "->", PREUNOP, UNOP, HEREDOC_REF, IHEREDOC_REF, "(", HEREDOC, IHEREDOC, "..", "...", BINOP, ".", IDENTIFIER, "\\n", "}", "]", ")", ","}
    reductions:
      $default: Rule 66

  State 116:
    1448/n1: vexpression → vexpression "(" vexpression.parameters.maybe ")" •
      {$end, "if", "unless", "class", "module", "while", "for", "return", ACTION, "try", ":", NUMBER, ISTRING, SSTRING, KEYWORD, REGEX, ISTRING_BEGIN, IHEREDOC_BEGIN, "+", "-", "{", "[", "->", PREUNOP, UNOP, HEREDOC_REF, IHEREDOC_REF, "(", HEREDOC, IHEREDOC, "..", "...", BINOP, ".", IDENTIFIER, "\\n", "}", "]", ")", ","}
    reductions:
      $default: Rule 36

  State 117:
    1449/n1: vexpression.parameters → vexpression.parameters "," • vexpression
      {}
    1450/n1: vexpression →  • NUMBER
      {}
    1451/n1: vexpression →  • ISTRING
      {}
    1452/n1: vexpression →  • SSTRING
      {}
    1453/n1: vexpression →  • KEYWORD
      {}
    1454/n1: vexpression →  • REGEX
      {}
    1455/n1: vexpression →  • interpolation
      {}
    1456/l3: vexpression →  • "+" vexpression
      {}
    1457/l3: vexpression →  • "-" vexpression
      {}
    1458/n1: vexpression →  • object
      {}
    1459/n1: vexpression →  • array
      {}
    1460/n1: vexpression →  • function
      {}
    1461/n1: vexpression →  • PREUNOP vexpression
      {}
    1462/r5: vexpression →  • UNOP vexpression
      {}
    1463/n1: vexpression →  • HEREDOC_REF
      {}
    1464/n1: vexpression →  • IHEREDOC_REF
      {}
    1465/n1: vexpression →  • "(" vexpression ")"
      {}
    1466/n1: vexpression →  • heredoc
      {}
    1467/n1: vexpression →  • vexpression "(" vexpression.parameters.maybe ")"
      {}
    1468/l4: vexpression →  • vexpression ".." vexpression
      {}
    1469/l4: vexpression →  • vexpression "..." vexpression
      {}
    1470/l3: vexpression →  • vexpression BINOP vexpression
      {}
    1471/l3: vexpression →  • vexpression "-" vexpression
      {}
    1472/l3: vexpression →  • vexpression "+" vexpression
      {}
    1473/r5: vexpression →  • vexpression UNOP
      {}
    1474/n1: vexpression →  • vvexpression
      {}
    1475/n1: interpolation →  • interpolation.string
      {}
    1476/n1: interpolation →  • interpolation.heredoc
      {}
    1477/n1: object →  • "{" "}"
      {}
    1478/n1: array →  • "[" "]"
      {}
    1479/n1: function →  • "->" function.arguments.maybe block
      {}
    1480/n1: heredoc →  • HEREDOC
      {}
    1481/n1: heredoc →  • IHEREDOC
      {}
    1482/n1: vvexpression →  • vexpression "." IDENTIFIER
      {}
    1483/n1: vvexpression →  • vexpression "[" vexpression "]"
      {}
    1484/n1: vvexpression →  • IDENTIFIER
      {}
    1485/n1: interpolation.string →  • ISTRING_BEGIN vexpression interpolation.string.finish
      {}
    1486/n1: interpolation.heredoc →  • IHEREDOC_BEGIN vexpression interpolation.heredoc.finish
      {}
    transitions:
      vexpression: State 139
      NUMBER: State 25
      ISTRING: State 26
      SSTRING: State 27
      KEYWORD: State 28
      REGEX: State 29
      interpolation: State 30
      "+": State 31
      "-": State 32
      object: State 33
      array: State 34
      function: State 35
      PREUNOP: State 36
      UNOP: State 37
      HEREDOC_REF: State 38
      IHEREDOC_REF: State 39
      "(": State 40
      heredoc: State 41
      vvexpression: State 14
      interpolation.string: State 43
      interpolation.heredoc: State 44
      "{": State 45
      "[": State 46
      "->": State 47
      HEREDOC: State 48
      IHEREDOC: State 49
      IDENTIFIER: State 42
      ISTRING_BEGIN: State 50
      IHEREDOC_BEGIN: State 51

  State 118:
    1487/n1: vvexpression → vexpression "[" vexpression "]" •
      {"=", $end, "if", "unless", "class", "module", "while", "for", "return", ACTION, "try", ":", NUMBER, ISTRING, SSTRING, KEYWORD, REGEX, ISTRING_BEGIN, IHEREDOC_BEGIN, "+", "-", "{", "[", "->", PREUNOP, UNOP, HEREDOC_REF, IHEREDOC_REF, "(", HEREDOC, IHEREDOC, "..", "...", BINOP, ".", IDENTIFIER, "\\n", "}", "]", ")", ","}
    reductions:
      $default: Rule 45

  State 119:
    1488/n1: conditional → "if" "(" vexpression ")" • block conditional.continue.maybe
      {}
    1489/n1: block →  • "{" expressions.maybe "}"
      {}
    transitions:
      block: State 140
      "{": State 106

  State 120:
    1490/n1: conditional → "unless" "(" vexpression ")" • block
      {}
    1491/n1: block →  • "{" expressions.maybe "}"
      {}
    transitions:
      block: State 141
      "{": State 106

  State 121:
    1492/n1: class → "class" IDENTIFIER "{" class.definition.parts.maybe • "}"
      {}
    transitions:
      "}": State 142

  State 122:
    1493/n1: class.definition.parts.maybe → class.definition.parts •
      {"}"}
    1494/n1: class.definition.parts → class.definition.parts • class.definition.part
      {}
    1495/n1: class.definition.part →  • IDENTIFIER ":" vexpression
      {}
    1496/n1: class.definition.part →  • IDENTIFIER "." IDENTIFIER ":" vexpression
      {}
    1497/n1: class.definition.part →  • module
      {}
    1498/n1: class.definition.part →  • class
      {}
    1499/n1: module →  • "module" IDENTIFIER "{" module.definition.parts.maybe "}"
      {}
    1500/n1: class →  • "class" IDENTIFIER "{" class.definition.parts.maybe "}"
      {}
    transitions:
      class.definition.part: State 143
      IDENTIFIER: State 124
      module: State 125
      class: State 126
      "module": State 18
      "class": State 17
    reductions:
      "}": Rule 78

  State 123:
    1501/n1: class.definition.parts → class.definition.part •
      {"}", IDENTIFIER, "module", "class"}
    reductions:
      "}": Rule 81
      IDENTIFIER: Rule 81
      "module": Rule 81
      "class": Rule 81

  State 124:
    1502/n1: class.definition.part → IDENTIFIER • ":" vexpression
      {}
    1503/n1: class.definition.part → IDENTIFIER • "." IDENTIFIER ":" vexpression
      {}
    transitions:
      ":": State 144
      ".": State 145

  State 125:
    1504/n1: class.definition.part → module •
      {"}", IDENTIFIER, "module", "class"}
    reductions:
      "}": Rule 84
      IDENTIFIER: Rule 84
      "module": Rule 84
      "class": Rule 84

  State 126:
    1505/n1: class.definition.part → class •
      {"}", IDENTIFIER, "module", "class"}
    reductions:
      "}": Rule 85
      IDENTIFIER: Rule 85
      "module": Rule 85
      "class": Rule 85

  State 127:
    1506/n1: module → "module" IDENTIFIER "{" module.definition.parts.maybe • "}"
      {}
    transitions:
      "}": State 146

  State 128:
    1507/n1: module.definition.parts.maybe → module.definition.parts •
      {"}"}
    1508/n1: module.definition.parts → module.definition.parts • module.definition.part
      {}
    1509/n1: module.definition.part →  • IDENTIFIER ":" vexpression
      {}
    transitions:
      module.definition.part: State 147
      IDENTIFIER: State 130
    reductions:
      "}": Rule 86

  State 129:
    1510/n1: module.definition.parts → module.definition.part •
      {"}", IDENTIFIER}
    reductions:
      "}": Rule 89
      IDENTIFIER: Rule 89

  State 130:
    1511/n1: module.definition.part → IDENTIFIER • ":" vexpression
      {}
    transitions:
      ":": State 148

  State 131:
    1512/n1: loop → "while" "(" vexpression ")" • block
      {}
    1513/n1: block →  • "{" expressions.maybe "}"
      {}
    transitions:
      block: State 149
      "{": State 106

  State 132:
    1514/n1: loop → "for" "(" IDENTIFIER "in" • vexpression ")" block
      {}
    1515/n1: vexpression →  • NUMBER
      {}
    1516/n1: vexpression →  • ISTRING
      {}
    1517/n1: vexpression →  • SSTRING
      {}
    1518/n1: vexpression →  • KEYWORD
      {}
    1519/n1: vexpression →  • REGEX
      {}
    1520/n1: vexpression →  • interpolation
      {}
    1521/l3: vexpression →  • "+" vexpression
      {}
    1522/l3: vexpression →  • "-" vexpression
      {}
    1523/n1: vexpression →  • object
      {}
    1524/n1: vexpression →  • array
      {}
    1525/n1: vexpression →  • function
      {}
    1526/n1: vexpression →  • PREUNOP vexpression
      {}
    1527/r5: vexpression →  • UNOP vexpression
      {}
    1528/n1: vexpression →  • HEREDOC_REF
      {}
    1529/n1: vexpression →  • IHEREDOC_REF
      {}
    1530/n1: vexpression →  • "(" vexpression ")"
      {}
    1531/n1: vexpression →  • heredoc
      {}
    1532/n1: vexpression →  • vexpression "(" vexpression.parameters.maybe ")"
      {}
    1533/l4: vexpression →  • vexpression ".." vexpression
      {}
    1534/l4: vexpression →  • vexpression "..." vexpression
      {}
    1535/l3: vexpression →  • vexpression BINOP vexpression
      {}
    1536/l3: vexpression →  • vexpression "-" vexpression
      {}
    1537/l3: vexpression →  • vexpression "+" vexpression
      {}
    1538/r5: vexpression →  • vexpression UNOP
      {}
    1539/n1: vexpression →  • vvexpression
      {}
    1540/n1: interpolation →  • interpolation.string
      {}
    1541/n1: interpolation →  • interpolation.heredoc
      {}
    1542/n1: object →  • "{" "}"
      {}
    1543/n1: array →  • "[" "]"
      {}
    1544/n1: function →  • "->" function.arguments.maybe block
      {}
    1545/n1: heredoc →  • HEREDOC
      {}
    1546/n1: heredoc →  • IHEREDOC
      {}
    1547/n1: vvexpression →  • vexpression "." IDENTIFIER
      {}
    1548/n1: vvexpression →  • vexpression "[" vexpression "]"
      {}
    1549/n1: vvexpression →  • IDENTIFIER
      {}
    1550/n1: interpolation.string →  • ISTRING_BEGIN vexpression interpolation.string.finish
      {}
    1551/n1: interpolation.heredoc →  • IHEREDOC_BEGIN vexpression interpolation.heredoc.finish
      {}
    transitions:
      vexpression: State 150
      NUMBER: State 25
      ISTRING: State 26
      SSTRING: State 27
      KEYWORD: State 28
      REGEX: State 29
      interpolation: State 30
      "+": State 31
      "-": State 32
      object: State 33
      array: State 34
      function: State 35
      PREUNOP: State 36
      UNOP: State 37
      HEREDOC_REF: State 38
      IHEREDOC_REF: State 39
      "(": State 40
      heredoc: State 41
      vvexpression: State 14
      interpolation.string: State 43
      interpolation.heredoc: State 44
      "{": State 45
      "[": State 46
      "->": State 47
      HEREDOC: State 48
      IHEREDOC: State 49
      IDENTIFIER: State 42
      ISTRING_BEGIN: State 50
      IHEREDOC_BEGIN: State 51

  State 133:
    1552/n1: loop → "for" "(" vexpression ")" • block
      {}
    1553/n1: block →  • "{" expressions.maybe "}"
      {}
    transitions:
      block: State 151
      "{": State 106

  State 134:
    1554/n1: exception → "try" "{" expressions.maybe "}" • exception.catch.maybe exception.finally.maybe
      {}
    1555/n1: exception.catch.maybe →  • exception.catch
      {}
    1556/n1: exception.catch.maybe →  •
      {"finally", $end, "if", "unless", "class", "module", "while", "for", "return", ACTION, "try", ":", NUMBER, ISTRING, SSTRING, KEYWORD, REGEX, ISTRING_BEGIN, IHEREDOC_BEGIN, "+", "-", "{", "[", "->", PREUNOP, UNOP, HEREDOC_REF, IHEREDOC_REF, "(", HEREDOC, IHEREDOC, "..", "...", BINOP, ".", IDENTIFIER, "\\n", "}", "]"}
    1557/n1: exception.catch →  • "catch" exception.catch.possible block
      {}
    transitions:
      exception.catch.maybe: State 152
      exception.catch: State 153
      "catch": State 154
    reductions:
      "finally": Rule 98
      $end: Rule 98
      "if": Rule 98
      "unless": Rule 98
      "class": Rule 98
      "module": Rule 98
      "while": Rule 98
      "for": Rule 98
      "return": Rule 98
      ACTION: Rule 98
      "try": Rule 98
      ":": Rule 98
      NUMBER: Rule 98
      ISTRING: Rule 98
      SSTRING: Rule 98
      KEYWORD: Rule 98
      REGEX: Rule 98
      ISTRING_BEGIN: Rule 98
      IHEREDOC_BEGIN: Rule 98
      "+": Rule 98
      "-": Rule 98
      "{": Rule 98
      "[": Rule 98
      "->": Rule 98
      PREUNOP: Rule 98
      UNOP: Rule 98
      HEREDOC_REF: Rule 98
      IHEREDOC_REF: Rule 98
      "(": Rule 98
      HEREDOC: Rule 98
      IHEREDOC: Rule 98
      "..": Rule 98
      "...": Rule 98
      BINOP: Rule 98
      ".": Rule 98
      IDENTIFIER: Rule 98
      "\\n": Rule 98
      "}": Rule 98
      "]": Rule 98

  State 135:
    1558/n1: directive → ":" "[" expressions "]" •
      {$end, "if", "unless", "class", "module", "while", "for", "return", ACTION, "try", ":", NUMBER, ISTRING, SSTRING, KEYWORD, REGEX, ISTRING_BEGIN, IHEREDOC_BEGIN, "+", "-", "{", "[", "->", PREUNOP, UNOP, HEREDOC_REF, IHEREDOC_REF, "(", HEREDOC, IHEREDOC, "..", "...", BINOP, ".", IDENTIFIER, "\\n", "}", "]"}
    reductions:
      $default: Rule 106

  State 136:
    1559/n1: block → "{" expressions.maybe • "}"
      {}
    transitions:
      "}": State 155

  State 137:
    1560/n1: function.arguments.maybe → "(" function.arguments.body.maybe ")" •
      {"{"}
    reductions:
      "{": Rule 56

  State 138:
    1561/n1: function.arguments.body → function.arguments.body "," • IDENTIFIER
      {}
    transitions:
      IDENTIFIER: State 156

  State 139:
    1562/n1: vexpression.parameters → vexpression.parameters "," vexpression •
      {")", ","}
    1563/n1: vexpression → vexpression • "(" vexpression.parameters.maybe ")"
      {}
    1564/l4: vexpression → vexpression • ".." vexpression
      {}
    1565/l4: vexpression → vexpression • "..." vexpression
      {}
    1566/l3: vexpression → vexpression • BINOP vexpression
      {}
    1567/l3: vexpression → vexpression • "-" vexpression
      {}
    1568/l3: vexpression → vexpression • "+" vexpression
      {}
    1569/r5: vexpression → vexpression • UNOP
      {}
    1570/n1: vvexpression → vexpression • "." IDENTIFIER
      {}
    1571/n1: vvexpression → vexpression • "[" vexpression "]"
      {}
    transitions:
      "(": State 54
      "..": State 55
      "...": State 56
      BINOP: State 57
      "-": State 58
      "+": State 59
      UNOP: State 60
      ".": State 61
      "[": State 62
    reductions:
      ")": Rule 49
      ",": Rule 49

  State 140:
    1572/n1: conditional → "if" "(" vexpression ")" block • conditional.continue.maybe
      {}
    1573/n1: conditional.continue.maybe →  • conditional.continue
      {}
    1574/n1: conditional.continue.maybe →  •
      {$end, "if", "unless", "class", "module", "while", "for", "return", ACTION, "try", ":", NUMBER, ISTRING, SSTRING, KEYWORD, REGEX, ISTRING_BEGIN, IHEREDOC_BEGIN, "+", "-", "{", "[", "->", PREUNOP, UNOP, HEREDOC_REF, IHEREDOC_REF, "(", HEREDOC, IHEREDOC, "..", "...", BINOP, ".", IDENTIFIER, "\\n", "}", "]"}
    1575/n1: conditional.continue →  • "elsif" "(" vexpression ")" block conditional.continue.maybe
      {}
    1576/n1: conditional.continue →  • "else" block
      {}
    transitions:
      conditional.continue.maybe: State 157
      conditional.continue: State 158
      "elsif": State 159
      "else": State 160
    reductions:
      $end: Rule 73
      "if": Rule 73
      "unless": Rule 73
      "class": Rule 73
      "module": Rule 73
      "while": Rule 73
      "for": Rule 73
      "return": Rule 73
      ACTION: Rule 73
      "try": Rule 73
      ":": Rule 73
      NUMBER: Rule 73
      ISTRING: Rule 73
      SSTRING: Rule 73
      KEYWORD: Rule 73
      REGEX: Rule 73
      ISTRING_BEGIN: Rule 73
      IHEREDOC_BEGIN: Rule 73
      "+": Rule 73
      "-": Rule 73
      "{": Rule 73
      "[": Rule 73
      "->": Rule 73
      PREUNOP: Rule 73
      UNOP: Rule 73
      HEREDOC_REF: Rule 73
      IHEREDOC_REF: Rule 73
      "(": Rule 73
      HEREDOC: Rule 73
      IHEREDOC: Rule 73
      "..": Rule 73
      "...": Rule 73
      BINOP: Rule 73
      ".": Rule 73
      IDENTIFIER: Rule 73
      "\\n": Rule 73
      "}": Rule 73
      "]": Rule 73

  State 141:
    1577/n1: conditional → "unless" "(" vexpression ")" block •
      {$end, "if", "unless", "class", "module", "while", "for", "return", ACTION, "try", ":", NUMBER, ISTRING, SSTRING, KEYWORD, REGEX, ISTRING_BEGIN, IHEREDOC_BEGIN, "+", "-", "{", "[", "->", PREUNOP, UNOP, HEREDOC_REF, IHEREDOC_REF, "(", HEREDOC, IHEREDOC, "..", "...", BINOP, ".", IDENTIFIER, "\\n", "}", "]"}
    reductions:
      $default: Rule 71

  State 142:
    1578/n1: class → "class" IDENTIFIER "{" class.definition.parts.maybe "}" •
      {$end, "if", "unless", "class", "module", "while", "for", "return", ACTION, "try", ":", NUMBER, ISTRING, SSTRING, KEYWORD, REGEX, ISTRING_BEGIN, IHEREDOC_BEGIN, "+", "-", "{", "[", "->", PREUNOP, UNOP, HEREDOC_REF, IHEREDOC_REF, "(", HEREDOC, IHEREDOC, "..", "...", BINOP, ".", IDENTIFIER, "\\n", "}", "]"}
    reductions:
      $default: Rule 76

  State 143:
    1579/n1: class.definition.parts → class.definition.parts class.definition.part •
      {"}", IDENTIFIER, "module", "class"}
    reductions:
      "}": Rule 80
      IDENTIFIER: Rule 80
      "module": Rule 80
      "class": Rule 80

  State 144:
    1580/n1: class.definition.part → IDENTIFIER ":" • vexpression
      {}
    1581/n1: vexpression →  • NUMBER
      {}
    1582/n1: vexpression →  • ISTRING
      {}
    1583/n1: vexpression →  • SSTRING
      {}
    1584/n1: vexpression →  • KEYWORD
      {}
    1585/n1: vexpression →  • REGEX
      {}
    1586/n1: vexpression →  • interpolation
      {}
    1587/l3: vexpression →  • "+" vexpression
      {}
    1588/l3: vexpression →  • "-" vexpression
      {}
    1589/n1: vexpression →  • object
      {}
    1590/n1: vexpression →  • array
      {}
    1591/n1: vexpression →  • function
      {}
    1592/n1: vexpression →  • PREUNOP vexpression
      {}
    1593/r5: vexpression →  • UNOP vexpression
      {}
    1594/n1: vexpression →  • HEREDOC_REF
      {}
    1595/n1: vexpression →  • IHEREDOC_REF
      {}
    1596/n1: vexpression →  • "(" vexpression ")"
      {}
    1597/n1: vexpression →  • heredoc
      {}
    1598/n1: vexpression →  • vexpression "(" vexpression.parameters.maybe ")"
      {}
    1599/l4: vexpression →  • vexpression ".." vexpression
      {}
    1600/l4: vexpression →  • vexpression "..." vexpression
      {}
    1601/l3: vexpression →  • vexpression BINOP vexpression
      {}
    1602/l3: vexpression →  • vexpression "-" vexpression
      {}
    1603/l3: vexpression →  • vexpression "+" vexpression
      {}
    1604/r5: vexpression →  • vexpression UNOP
      {}
    1605/n1: vexpression →  • vvexpression
      {}
    1606/n1: interpolation →  • interpolation.string
      {}
    1607/n1: interpolation →  • interpolation.heredoc
      {}
    1608/n1: object →  • "{" "}"
      {}
    1609/n1: array →  • "[" "]"
      {}
    1610/n1: function →  • "->" function.arguments.maybe block
      {}
    1611/n1: heredoc →  • HEREDOC
      {}
    1612/n1: heredoc →  • IHEREDOC
      {}
    1613/n1: vvexpression →  • vexpression "." IDENTIFIER
      {}
    1614/n1: vvexpression →  • vexpression "[" vexpression "]"
      {}
    1615/n1: vvexpression →  • IDENTIFIER
      {}
    1616/n1: interpolation.string →  • ISTRING_BEGIN vexpression interpolation.string.finish
      {}
    1617/n1: interpolation.heredoc →  • IHEREDOC_BEGIN vexpression interpolation.heredoc.finish
      {}
    transitions:
      vexpression: State 161
      NUMBER: State 25
      ISTRING: State 26
      SSTRING: State 27
      KEYWORD: State 28
      REGEX: State 29
      interpolation: State 30
      "+": State 31
      "-": State 32
      object: State 33
      array: State 34
      function: State 35
      PREUNOP: State 36
      UNOP: State 37
      HEREDOC_REF: State 38
      IHEREDOC_REF: State 39
      "(": State 40
      heredoc: State 41
      vvexpression: State 14
      interpolation.string: State 43
      interpolation.heredoc: State 44
      "{": State 45
      "[": State 46
      "->": State 47
      HEREDOC: State 48
      IHEREDOC: State 49
      IDENTIFIER: State 42
      ISTRING_BEGIN: State 50
      IHEREDOC_BEGIN: State 51

  State 145:
    1618/n1: class.definition.part → IDENTIFIER "." • IDENTIFIER ":" vexpression
      {}
    transitions:
      IDENTIFIER: State 162

  State 146:
    1619/n1: module → "module" IDENTIFIER "{" module.definition.parts.maybe "}" •
      {$end, "if", "unless", "class", "module", "while", "for", "return", ACTION, "try", ":", NUMBER, ISTRING, SSTRING, KEYWORD, REGEX, ISTRING_BEGIN, IHEREDOC_BEGIN, "+", "-", "{", "[", "->", PREUNOP, UNOP, HEREDOC_REF, IHEREDOC_REF, "(", HEREDOC, IHEREDOC, "..", "...", BINOP, ".", IDENTIFIER, "\\n", "}", "]"}
    reductions:
      $default: Rule 77

  State 147:
    1620/n1: module.definition.parts → module.definition.parts module.definition.part •
      {"}", IDENTIFIER}
    reductions:
      "}": Rule 88
      IDENTIFIER: Rule 88

  State 148:
    1621/n1: module.definition.part → IDENTIFIER ":" • vexpression
      {}
    1622/n1: vexpression →  • NUMBER
      {}
    1623/n1: vexpression →  • ISTRING
      {}
    1624/n1: vexpression →  • SSTRING
      {}
    1625/n1: vexpression →  • KEYWORD
      {}
    1626/n1: vexpression →  • REGEX
      {}
    1627/n1: vexpression →  • interpolation
      {}
    1628/l3: vexpression →  • "+" vexpression
      {}
    1629/l3: vexpression →  • "-" vexpression
      {}
    1630/n1: vexpression →  • object
      {}
    1631/n1: vexpression →  • array
      {}
    1632/n1: vexpression →  • function
      {}
    1633/n1: vexpression →  • PREUNOP vexpression
      {}
    1634/r5: vexpression →  • UNOP vexpression
      {}
    1635/n1: vexpression →  • HEREDOC_REF
      {}
    1636/n1: vexpression →  • IHEREDOC_REF
      {}
    1637/n1: vexpression →  • "(" vexpression ")"
      {}
    1638/n1: vexpression →  • heredoc
      {}
    1639/n1: vexpression →  • vexpression "(" vexpression.parameters.maybe ")"
      {}
    1640/l4: vexpression →  • vexpression ".." vexpression
      {}
    1641/l4: vexpression →  • vexpression "..." vexpression
      {}
    1642/l3: vexpression →  • vexpression BINOP vexpression
      {}
    1643/l3: vexpression →  • vexpression "-" vexpression
      {}
    1644/l3: vexpression →  • vexpression "+" vexpression
      {}
    1645/r5: vexpression →  • vexpression UNOP
      {}
    1646/n1: vexpression →  • vvexpression
      {}
    1647/n1: interpolation →  • interpolation.string
      {}
    1648/n1: interpolation →  • interpolation.heredoc
      {}
    1649/n1: object →  • "{" "}"
      {}
    1650/n1: array →  • "[" "]"
      {}
    1651/n1: function →  • "->" function.arguments.maybe block
      {}
    1652/n1: heredoc →  • HEREDOC
      {}
    1653/n1: heredoc →  • IHEREDOC
      {}
    1654/n1: vvexpression →  • vexpression "." IDENTIFIER
      {}
    1655/n1: vvexpression →  • vexpression "[" vexpression "]"
      {}
    1656/n1: vvexpression →  • IDENTIFIER
      {}
    1657/n1: interpolation.string →  • ISTRING_BEGIN vexpression interpolation.string.finish
      {}
    1658/n1: interpolation.heredoc →  • IHEREDOC_BEGIN vexpression interpolation.heredoc.finish
      {}
    transitions:
      vexpression: State 163
      NUMBER: State 25
      ISTRING: State 26
      SSTRING: State 27
      KEYWORD: State 28
      REGEX: State 29
      interpolation: State 30
      "+": State 31
      "-": State 32
      object: State 33
      array: State 34
      function: State 35
      PREUNOP: State 36
      UNOP: State 37
      HEREDOC_REF: State 38
      IHEREDOC_REF: State 39
      "(": State 40
      heredoc: State 41
      vvexpression: State 14
      interpolation.string: State 43
      interpolation.heredoc: State 44
      "{": State 45
      "[": State 46
      "->": State 47
      HEREDOC: State 48
      IHEREDOC: State 49
      IDENTIFIER: State 42
      ISTRING_BEGIN: State 50
      IHEREDOC_BEGIN: State 51

  State 149:
    1659/n1: loop → "while" "(" vexpression ")" block •
      {$end, "if", "unless", "class", "module", "while", "for", "return", ACTION, "try", ":", NUMBER, ISTRING, SSTRING, KEYWORD, REGEX, ISTRING_BEGIN, IHEREDOC_BEGIN, "+", "-", "{", "[", "->", PREUNOP, UNOP, HEREDOC_REF, IHEREDOC_REF, "(", HEREDOC, IHEREDOC, "..", "...", BINOP, ".", IDENTIFIER, "\\n", "}", "]"}
    reductions:
      $default: Rule 91

  State 150:
    1660/n1: loop → "for" "(" IDENTIFIER "in" vexpression • ")" block
      {}
    1661/n1: vexpression → vexpression • "(" vexpression.parameters.maybe ")"
      {}
    1662/l4: vexpression → vexpression • ".." vexpression
      {}
    1663/l4: vexpression → vexpression • "..." vexpression
      {}
    1664/l3: vexpression → vexpression • BINOP vexpression
      {}
    1665/l3: vexpression → vexpression • "-" vexpression
      {}
    1666/l3: vexpression → vexpression • "+" vexpression
      {}
    1667/r5: vexpression → vexpression • UNOP
      {}
    1668/n1: vvexpression → vexpression • "." IDENTIFIER
      {}
    1669/n1: vvexpression → vexpression • "[" vexpression "]"
      {}
    transitions:
      ")": State 164
      "(": State 54
      "..": State 55
      "...": State 56
      BINOP: State 57
      "-": State 58
      "+": State 59
      UNOP: State 60
      ".": State 61
      "[": State 62

  State 151:
    1670/n1: loop → "for" "(" vexpression ")" block •
      {$end, "if", "unless", "class", "module", "while", "for", "return", ACTION, "try", ":", NUMBER, ISTRING, SSTRING, KEYWORD, REGEX, ISTRING_BEGIN, IHEREDOC_BEGIN, "+", "-", "{", "[", "->", PREUNOP, UNOP, HEREDOC_REF, IHEREDOC_REF, "(", HEREDOC, IHEREDOC, "..", "...", BINOP, ".", IDENTIFIER, "\\n", "}", "]"}
    reductions:
      $default: Rule 93

  State 152:
    1671/n1: exception → "try" "{" expressions.maybe "}" exception.catch.maybe • exception.finally.maybe
      {}
    1672/n1: exception.finally.maybe →  • exception.finally
      {}
    1673/n1: exception.finally.maybe →  •
      {$end, "if", "unless", "class", "module", "while", "for", "return", ACTION, "try", ":", NUMBER, ISTRING, SSTRING, KEYWORD, REGEX, ISTRING_BEGIN, IHEREDOC_BEGIN, "+", "-", "{", "[", "->", PREUNOP, UNOP, HEREDOC_REF, IHEREDOC_REF, "(", HEREDOC, IHEREDOC, "..", "...", BINOP, ".", IDENTIFIER, "\\n", "}", "]"}
    1674/n1: exception.finally →  • "finally" block
      {}
    transitions:
      exception.finally.maybe: State 165
      exception.finally: State 166
      "finally": State 167
    reductions:
      $end: Rule 100
      "if": Rule 100
      "unless": Rule 100
      "class": Rule 100
      "module": Rule 100
      "while": Rule 100
      "for": Rule 100
      "return": Rule 100
      ACTION: Rule 100
      "try": Rule 100
      ":": Rule 100
      NUMBER: Rule 100
      ISTRING: Rule 100
      SSTRING: Rule 100
      KEYWORD: Rule 100
      REGEX: Rule 100
      ISTRING_BEGIN: Rule 100
      IHEREDOC_BEGIN: Rule 100
      "+": Rule 100
      "-": Rule 100
      "{": Rule 100
      "[": Rule 100
      "->": Rule 100
      PREUNOP: Rule 100
      UNOP: Rule 100
      HEREDOC_REF: Rule 100
      IHEREDOC_REF: Rule 100
      "(": Rule 100
      HEREDOC: Rule 100
      IHEREDOC: Rule 100
      "..": Rule 100
      "...": Rule 100
      BINOP: Rule 100
      ".": Rule 100
      IDENTIFIER: Rule 100
      "\\n": Rule 100
      "}": Rule 100
      "]": Rule 100

  State 153:
    1675/n1: exception.catch.maybe → exception.catch •
      {"finally", $end, "if", "unless", "class", "module", "while", "for", "return", ACTION, "try", ":", NUMBER, ISTRING, SSTRING, KEYWORD, REGEX, ISTRING_BEGIN, IHEREDOC_BEGIN, "+", "-", "{", "[", "->", PREUNOP, UNOP, HEREDOC_REF, IHEREDOC_REF, "(", HEREDOC, IHEREDOC, "..", "...", BINOP, ".", IDENTIFIER, "\\n", "}", "]"}
    reductions:
      $default: Rule 97

  State 154:
    1676/n1: exception.catch → "catch" • exception.catch.possible block
      {}
    1677/n1: exception.catch.possible →  • "(" IDENTIFIER ")"
      {}
    1678/n1: exception.catch.possible →  • "(" ")"
      {}
    1679/n1: exception.catch.possible →  •
      {"{"}
    transitions:
      exception.catch.possible: State 168
      "(": State 169
    reductions:
      "{": Rule 104

  State 155:
    1680/n1: block → "{" expressions.maybe "}" •
      {$end, "if", "unless", "class", "module", "while", "for", "return", ACTION, "try", ":", NUMBER, ISTRING, SSTRING, KEYWORD, REGEX, ISTRING_BEGIN, IHEREDOC_BEGIN, "+", "-", "{", "[", "->", PREUNOP, UNOP, HEREDOC_REF, IHEREDOC_REF, "(", HEREDOC, IHEREDOC, "..", "...", BINOP, ".", IDENTIFIER, "\\n", "}", "]", ")", ",", "elsif", "else", "finally"}
    reductions:
      $default: Rule 6

  State 156:
    1681/n1: function.arguments.body → function.arguments.body "," IDENTIFIER •
      {")", ","}
    reductions:
      ")": Rule 60
      ",": Rule 60

  State 157:
    1682/n1: conditional → "if" "(" vexpression ")" block conditional.continue.maybe •
      {$end, "if", "unless", "class", "module", "while", "for", "return", ACTION, "try", ":", NUMBER, ISTRING, SSTRING, KEYWORD, REGEX, ISTRING_BEGIN, IHEREDOC_BEGIN, "+", "-", "{", "[", "->", PREUNOP, UNOP, HEREDOC_REF, IHEREDOC_REF, "(", HEREDOC, IHEREDOC, "..", "...", BINOP, ".", IDENTIFIER, "\\n", "}", "]"}
    reductions:
      $default: Rule 70

  State 158:
    1683/n1: conditional.continue.maybe → conditional.continue •
      {$end, "if", "unless", "class", "module", "while", "for", "return", ACTION, "try", ":", NUMBER, ISTRING, SSTRING, KEYWORD, REGEX, ISTRING_BEGIN, IHEREDOC_BEGIN, "+", "-", "{", "[", "->", PREUNOP, UNOP, HEREDOC_REF, IHEREDOC_REF, "(", HEREDOC, IHEREDOC, "..", "...", BINOP, ".", IDENTIFIER, "\\n", "}", "]"}
    reductions:
      $default: Rule 72

  State 159:
    1684/n1: conditional.continue → "elsif" • "(" vexpression ")" block conditional.continue.maybe
      {}
    transitions:
      "(": State 170

  State 160:
    1685/n1: conditional.continue → "else" • block
      {}
    1686/n1: block →  • "{" expressions.maybe "}"
      {}
    transitions:
      block: State 171
      "{": State 106

  State 161:
    1687/n1: class.definition.part → IDENTIFIER ":" vexpression •
      {"}", IDENTIFIER, "module", "class"}
    1688/n1: vexpression → vexpression • "(" vexpression.parameters.maybe ")"
      {}
    1689/l4: vexpression → vexpression • ".." vexpression
      {}
    1690/l4: vexpression → vexpression • "..." vexpression
      {}
    1691/l3: vexpression → vexpression • BINOP vexpression
      {}
    1692/l3: vexpression → vexpression • "-" vexpression
      {}
    1693/l3: vexpression → vexpression • "+" vexpression
      {}
    1694/r5: vexpression → vexpression • UNOP
      {}
    1695/n1: vvexpression → vexpression • "." IDENTIFIER
      {}
    1696/n1: vvexpression → vexpression • "[" vexpression "]"
      {}
    transitions:
      "(": State 54
      "..": State 55
      "...": State 56
      BINOP: State 57
      "-": State 58
      "+": State 59
      UNOP: State 60
      ".": State 61
      "[": State 62
    reductions:
      "}": Rule 82
      IDENTIFIER: Rule 82
      "module": Rule 82
      "class": Rule 82

  State 162:
    1697/n1: class.definition.part → IDENTIFIER "." IDENTIFIER • ":" vexpression
      {}
    transitions:
      ":": State 172

  State 163:
    1698/n1: module.definition.part → IDENTIFIER ":" vexpression •
      {"}", IDENTIFIER}
    1699/n1: vexpression → vexpression • "(" vexpression.parameters.maybe ")"
      {}
    1700/l4: vexpression → vexpression • ".." vexpression
      {}
    1701/l4: vexpression → vexpression • "..." vexpression
      {}
    1702/l3: vexpression → vexpression • BINOP vexpression
      {}
    1703/l3: vexpression → vexpression • "-" vexpression
      {}
    1704/l3: vexpression → vexpression • "+" vexpression
      {}
    1705/r5: vexpression → vexpression • UNOP
      {}
    1706/n1: vvexpression → vexpression • "." IDENTIFIER
      {}
    1707/n1: vvexpression → vexpression • "[" vexpression "]"
      {}
    transitions:
      "(": State 54
      "..": State 55
      "...": State 56
      BINOP: State 57
      "-": State 58
      "+": State 59
      UNOP: State 60
      ".": State 61
      "[": State 62
    reductions:
      "}": Rule 90
      IDENTIFIER: Rule 90

  State 164:
    1708/n1: loop → "for" "(" IDENTIFIER "in" vexpression ")" • block
      {}
    1709/n1: block →  • "{" expressions.maybe "}"
      {}
    transitions:
      block: State 173
      "{": State 106

  State 165:
    1710/n1: exception → "try" "{" expressions.maybe "}" exception.catch.maybe exception.finally.maybe •
      {$end, "if", "unless", "class", "module", "while", "for", "return", ACTION, "try", ":", NUMBER, ISTRING, SSTRING, KEYWORD, REGEX, ISTRING_BEGIN, IHEREDOC_BEGIN, "+", "-", "{", "[", "->", PREUNOP, UNOP, HEREDOC_REF, IHEREDOC_REF, "(", HEREDOC, IHEREDOC, "..", "...", BINOP, ".", IDENTIFIER, "\\n", "}", "]"}
    reductions:
      $default: Rule 96

  State 166:
    1711/n1: exception.finally.maybe → exception.finally •
      {$end, "if", "unless", "class", "module", "while", "for", "return", ACTION, "try", ":", NUMBER, ISTRING, SSTRING, KEYWORD, REGEX, ISTRING_BEGIN, IHEREDOC_BEGIN, "+", "-", "{", "[", "->", PREUNOP, UNOP, HEREDOC_REF, IHEREDOC_REF, "(", HEREDOC, IHEREDOC, "..", "...", BINOP, ".", IDENTIFIER, "\\n", "}", "]"}
    reductions:
      $default: Rule 99

  State 167:
    1712/n1: exception.finally → "finally" • block
      {}
    1713/n1: block →  • "{" expressions.maybe "}"
      {}
    transitions:
      block: State 174
      "{": State 106

  State 168:
    1714/n1: exception.catch → "catch" exception.catch.possible • block
      {}
    1715/n1: block →  • "{" expressions.maybe "}"
      {}
    transitions:
      block: State 175
      "{": State 106

  State 169:
    1716/n1: exception.catch.possible → "(" • IDENTIFIER ")"
      {}
    1717/n1: exception.catch.possible → "(" • ")"
      {}
    transitions:
      IDENTIFIER: State 176
      ")": State 177

  State 170:
    1718/n1: conditional.continue → "elsif" "(" • vexpression ")" block conditional.continue.maybe
      {}
    1719/n1: vexpression →  • NUMBER
      {}
    1720/n1: vexpression →  • ISTRING
      {}
    1721/n1: vexpression →  • SSTRING
      {}
    1722/n1: vexpression →  • KEYWORD
      {}
    1723/n1: vexpression →  • REGEX
      {}
    1724/n1: vexpression →  • interpolation
      {}
    1725/l3: vexpression →  • "+" vexpression
      {}
    1726/l3: vexpression →  • "-" vexpression
      {}
    1727/n1: vexpression →  • object
      {}
    1728/n1: vexpression →  • array
      {}
    1729/n1: vexpression →  • function
      {}
    1730/n1: vexpression →  • PREUNOP vexpression
      {}
    1731/r5: vexpression →  • UNOP vexpression
      {}
    1732/n1: vexpression →  • HEREDOC_REF
      {}
    1733/n1: vexpression →  • IHEREDOC_REF
      {}
    1734/n1: vexpression →  • "(" vexpression ")"
      {}
    1735/n1: vexpression →  • heredoc
      {}
    1736/n1: vexpression →  • vexpression "(" vexpression.parameters.maybe ")"
      {}
    1737/l4: vexpression →  • vexpression ".." vexpression
      {}
    1738/l4: vexpression →  • vexpression "..." vexpression
      {}
    1739/l3: vexpression →  • vexpression BINOP vexpression
      {}
    1740/l3: vexpression →  • vexpression "-" vexpression
      {}
    1741/l3: vexpression →  • vexpression "+" vexpression
      {}
    1742/r5: vexpression →  • vexpression UNOP
      {}
    1743/n1: vexpression →  • vvexpression
      {}
    1744/n1: interpolation →  • interpolation.string
      {}
    1745/n1: interpolation →  • interpolation.heredoc
      {}
    1746/n1: object →  • "{" "}"
      {}
    1747/n1: array →  • "[" "]"
      {}
    1748/n1: function →  • "->" function.arguments.maybe block
      {}
    1749/n1: heredoc →  • HEREDOC
      {}
    1750/n1: heredoc →  • IHEREDOC
      {}
    1751/n1: vvexpression →  • vexpression "." IDENTIFIER
      {}
    1752/n1: vvexpression →  • vexpression "[" vexpression "]"
      {}
    1753/n1: vvexpression →  • IDENTIFIER
      {}
    1754/n1: interpolation.string →  • ISTRING_BEGIN vexpression interpolation.string.finish
      {}
    1755/n1: interpolation.heredoc →  • IHEREDOC_BEGIN vexpression interpolation.heredoc.finish
      {}
    transitions:
      vexpression: State 178
      NUMBER: State 25
      ISTRING: State 26
      SSTRING: State 27
      KEYWORD: State 28
      REGEX: State 29
      interpolation: State 30
      "+": State 31
      "-": State 32
      object: State 33
      array: State 34
      function: State 35
      PREUNOP: State 36
      UNOP: State 37
      HEREDOC_REF: State 38
      IHEREDOC_REF: State 39
      "(": State 40
      heredoc: State 41
      vvexpression: State 14
      interpolation.string: State 43
      interpolation.heredoc: State 44
      "{": State 45
      "[": State 46
      "->": State 47
      HEREDOC: State 48
      IHEREDOC: State 49
      IDENTIFIER: State 42
      ISTRING_BEGIN: State 50
      IHEREDOC_BEGIN: State 51

  State 171:
    1756/n1: conditional.continue → "else" block •
      {$end, "if", "unless", "class", "module", "while", "for", "return", ACTION, "try", ":", NUMBER, ISTRING, SSTRING, KEYWORD, REGEX, ISTRING_BEGIN, IHEREDOC_BEGIN, "+", "-", "{", "[", "->", PREUNOP, UNOP, HEREDOC_REF, IHEREDOC_REF, "(", HEREDOC, IHEREDOC, "..", "...", BINOP, ".", IDENTIFIER, "\\n", "}", "]"}
    reductions:
      $default: Rule 75

  State 172:
    1757/n1: class.definition.part → IDENTIFIER "." IDENTIFIER ":" • vexpression
      {}
    1758/n1: vexpression →  • NUMBER
      {}
    1759/n1: vexpression →  • ISTRING
      {}
    1760/n1: vexpression →  • SSTRING
      {}
    1761/n1: vexpression →  • KEYWORD
      {}
    1762/n1: vexpression →  • REGEX
      {}
    1763/n1: vexpression →  • interpolation
      {}
    1764/l3: vexpression →  • "+" vexpression
      {}
    1765/l3: vexpression →  • "-" vexpression
      {}
    1766/n1: vexpression →  • object
      {}
    1767/n1: vexpression →  • array
      {}
    1768/n1: vexpression →  • function
      {}
    1769/n1: vexpression →  • PREUNOP vexpression
      {}
    1770/r5: vexpression →  • UNOP vexpression
      {}
    1771/n1: vexpression →  • HEREDOC_REF
      {}
    1772/n1: vexpression →  • IHEREDOC_REF
      {}
    1773/n1: vexpression →  • "(" vexpression ")"
      {}
    1774/n1: vexpression →  • heredoc
      {}
    1775/n1: vexpression →  • vexpression "(" vexpression.parameters.maybe ")"
      {}
    1776/l4: vexpression →  • vexpression ".." vexpression
      {}
    1777/l4: vexpression →  • vexpression "..." vexpression
      {}
    1778/l3: vexpression →  • vexpression BINOP vexpression
      {}
    1779/l3: vexpression →  • vexpression "-" vexpression
      {}
    1780/l3: vexpression →  • vexpression "+" vexpression
      {}
    1781/r5: vexpression →  • vexpression UNOP
      {}
    1782/n1: vexpression →  • vvexpression
      {}
    1783/n1: interpolation →  • interpolation.string
      {}
    1784/n1: interpolation →  • interpolation.heredoc
      {}
    1785/n1: object →  • "{" "}"
      {}
    1786/n1: array →  • "[" "]"
      {}
    1787/n1: function →  • "->" function.arguments.maybe block
      {}
    1788/n1: heredoc →  • HEREDOC
      {}
    1789/n1: heredoc →  • IHEREDOC
      {}
    1790/n1: vvexpression →  • vexpression "." IDENTIFIER
      {}
    1791/n1: vvexpression →  • vexpression "[" vexpression "]"
      {}
    1792/n1: vvexpression →  • IDENTIFIER
      {}
    1793/n1: interpolation.string →  • ISTRING_BEGIN vexpression interpolation.string.finish
      {}
    1794/n1: interpolation.heredoc →  • IHEREDOC_BEGIN vexpression interpolation.heredoc.finish
      {}
    transitions:
      vexpression: State 179
      NUMBER: State 25
      ISTRING: State 26
      SSTRING: State 27
      KEYWORD: State 28
      REGEX: State 29
      interpolation: State 30
      "+": State 31
      "-": State 32
      object: State 33
      array: State 34
      function: State 35
      PREUNOP: State 36
      UNOP: State 37
      HEREDOC_REF: State 38
      IHEREDOC_REF: State 39
      "(": State 40
      heredoc: State 41
      vvexpression: State 14
      interpolation.string: State 43
      interpolation.heredoc: State 44
      "{": State 45
      "[": State 46
      "->": State 47
      HEREDOC: State 48
      IHEREDOC: State 49
      IDENTIFIER: State 42
      ISTRING_BEGIN: State 50
      IHEREDOC_BEGIN: State 51

  State 173:
    1795/n1: loop → "for" "(" IDENTIFIER "in" vexpression ")" block •
      {$end, "if", "unless", "class", "module", "while", "for", "return", ACTION, "try", ":", NUMBER, ISTRING, SSTRING, KEYWORD, REGEX, ISTRING_BEGIN, IHEREDOC_BEGIN, "+", "-", "{", "[", "->", PREUNOP, UNOP, HEREDOC_REF, IHEREDOC_REF, "(", HEREDOC, IHEREDOC, "..", "...", BINOP, ".", IDENTIFIER, "\\n", "}", "]"}
    reductions:
      $default: Rule 92

  State 174:
    1796/n1: exception.finally → "finally" block •
      {$end, "if", "unless", "class", "module", "while", "for", "return", ACTION, "try", ":", NUMBER, ISTRING, SSTRING, KEYWORD, REGEX, ISTRING_BEGIN, IHEREDOC_BEGIN, "+", "-", "{", "[", "->", PREUNOP, UNOP, HEREDOC_REF, IHEREDOC_REF, "(", HEREDOC, IHEREDOC, "..", "...", BINOP, ".", IDENTIFIER, "\\n", "}", "]"}
    reductions:
      $default: Rule 105

  State 175:
    1797/n1: exception.catch → "catch" exception.catch.possible block •
      {"finally", $end, "if", "unless", "class", "module", "while", "for", "return", ACTION, "try", ":", NUMBER, ISTRING, SSTRING, KEYWORD, REGEX, ISTRING_BEGIN, IHEREDOC_BEGIN, "+", "-", "{", "[", "->", PREUNOP, UNOP, HEREDOC_REF, IHEREDOC_REF, "(", HEREDOC, IHEREDOC, "..", "...", BINOP, ".", IDENTIFIER, "\\n", "}", "]"}
    reductions:
      $default: Rule 101

  State 176:
    1798/n1: exception.catch.possible → "(" IDENTIFIER • ")"
      {}
    transitions:
      ")": State 180

  State 177:
    1799/n1: exception.catch.possible → "(" ")" •
      {"{"}
    reductions:
      "{": Rule 103

  State 178:
    1800/n1: conditional.continue → "elsif" "(" vexpression • ")" block conditional.continue.maybe
      {}
    1801/n1: vexpression → vexpression • "(" vexpression.parameters.maybe ")"
      {}
    1802/l4: vexpression → vexpression • ".." vexpression
      {}
    1803/l4: vexpression → vexpression • "..." vexpression
      {}
    1804/l3: vexpression → vexpression • BINOP vexpression
      {}
    1805/l3: vexpression → vexpression • "-" vexpression
      {}
    1806/l3: vexpression → vexpression • "+" vexpression
      {}
    1807/r5: vexpression → vexpression • UNOP
      {}
    1808/n1: vvexpression → vexpression • "." IDENTIFIER
      {}
    1809/n1: vvexpression → vexpression • "[" vexpression "]"
      {}
    transitions:
      ")": State 181
      "(": State 54
      "..": State 55
      "...": State 56
      BINOP: State 57
      "-": State 58
      "+": State 59
      UNOP: State 60
      ".": State 61
      "[": State 62

  State 179:
    1810/n1: class.definition.part → IDENTIFIER "." IDENTIFIER ":" vexpression •
      {"}", IDENTIFIER, "module", "class"}
    1811/n1: vexpression → vexpression • "(" vexpression.parameters.maybe ")"
      {}
    1812/l4: vexpression → vexpression • ".." vexpression
      {}
    1813/l4: vexpression → vexpression • "..." vexpression
      {}
    1814/l3: vexpression → vexpression • BINOP vexpression
      {}
    1815/l3: vexpression → vexpression • "-" vexpression
      {}
    1816/l3: vexpression → vexpression • "+" vexpression
      {}
    1817/r5: vexpression → vexpression • UNOP
      {}
    1818/n1: vvexpression → vexpression • "." IDENTIFIER
      {}
    1819/n1: vvexpression → vexpression • "[" vexpression "]"
      {}
    transitions:
      "(": State 54
      "..": State 55
      "...": State 56
      BINOP: State 57
      "-": State 58
      "+": State 59
      UNOP: State 60
      ".": State 61
      "[": State 62
    reductions:
      "}": Rule 83
      IDENTIFIER: Rule 83
      "module": Rule 83
      "class": Rule 83

  State 180:
    1820/n1: exception.catch.possible → "(" IDENTIFIER ")" •
      {"{"}
    reductions:
      "{": Rule 102

  State 181:
    1821/n1: conditional.continue → "elsif" "(" vexpression ")" • block conditional.continue.maybe
      {}
    1822/n1: block →  • "{" expressions.maybe "}"
      {}
    transitions:
      block: State 182
      "{": State 106

  State 182:
    1823/n1: conditional.continue → "elsif" "(" vexpression ")" block • conditional.continue.maybe
      {}
    1824/n1: conditional.continue.maybe →  • conditional.continue
      {}
    1825/n1: conditional.continue.maybe →  •
      {$end, "if", "unless", "class", "module", "while", "for", "return", ACTION, "try", ":", NUMBER, ISTRING, SSTRING, KEYWORD, REGEX, ISTRING_BEGIN, IHEREDOC_BEGIN, "+", "-", "{", "[", "->", PREUNOP, UNOP, HEREDOC_REF, IHEREDOC_REF, "(", HEREDOC, IHEREDOC, "..", "...", BINOP, ".", IDENTIFIER, "\\n", "}", "]"}
    1826/n1: conditional.continue →  • "elsif" "(" vexpression ")" block conditional.continue.maybe
      {}
    1827/n1: conditional.continue →  • "else" block
      {}
    transitions:
      conditional.continue.maybe: State 183
      conditional.continue: State 158
      "elsif": State 159
      "else": State 160
    reductions:
      $end: Rule 73
      "if": Rule 73
      "unless": Rule 73
      "class": Rule 73
      "module": Rule 73
      "while": Rule 73
      "for": Rule 73
      "return": Rule 73
      ACTION: Rule 73
      "try": Rule 73
      ":": Rule 73
      NUMBER: Rule 73
      ISTRING: Rule 73
      SSTRING: Rule 73
      KEYWORD: Rule 73
      REGEX: Rule 73
      ISTRING_BEGIN: Rule 73
      IHEREDOC_BEGIN: Rule 73
      "+": Rule 73
      "-": Rule 73
      "{": Rule 73
      "[": Rule 73
      "->": Rule 73
      PREUNOP: Rule 73
      UNOP: Rule 73
      HEREDOC_REF: Rule 73
      IHEREDOC_REF: Rule 73
      "(": Rule 73
      HEREDOC: Rule 73
      IHEREDOC: Rule 73
      "..": Rule 73
      "...": Rule 73
      BINOP: Rule 73
      ".": Rule 73
      IDENTIFIER: Rule 73
      "\\n": Rule 73
      "}": Rule 73
      "]": Rule 73

  State 183:
    1828/n1: conditional.continue → "elsif" "(" vexpression ")" block conditional.continue.maybe •
      {$end, "if", "unless", "class", "module", "while", "for", "return", ACTION, "try", ":", NUMBER, ISTRING, SSTRING, KEYWORD, REGEX, ISTRING_BEGIN, IHEREDOC_BEGIN, "+", "-", "{", "[", "->", PREUNOP, UNOP, HEREDOC_REF, IHEREDOC_REF, "(", HEREDOC, IHEREDOC, "..", "...", BINOP, ".", IDENTIFIER, "\\n", "}", "]"}
    reductions:
      $default: Rule 74

